import org.openrndr.KEY_SPACEBAR
import org.openrndr.application
import org.openrndr.color.ColorHSVa
import org.openrndr.color.ColorRGBa
import org.openrndr.color.rgb
import org.openrndr.draw.isolated
import org.openrndr.extra.color.spaces.ColorOKHSLa
import org.openrndr.extra.color.spaces.ColorOKHSVa
import org.openrndr.extra.gui.GUI
import org.openrndr.extra.parameters.*
import org.openrndr.math.Matrix44
import org.openrndr.math.Vector2
import org.openrndr.shape.*
import org.openrndr.svg.saveToFile
import java.io.File
import java.util.*
import kotlin.math.abs
import kotlin.math.max
import kotlin.math.min
import kotlin.math.sqrt

fun treePositionToPoint(tp: TreePosition<EmbeddedMergeTree>): Vector2? {
    val c = tp.firstDown.edgeContour ?: LineSegment(tp.firstDown.pos, tp.firstDown.pos - Vector2(0.0, 1000.0)).contour
    if (c.segments.size == 1 && c.segments.first().control.size == 1) {
        val b = tp.height
        val seg = c.segments.first()
        val p0 = seg.start
        val p1 = seg.control[0]
        val p2 = seg.end
        val a = p0.y - 2 * p1.y + p2.y
        val t = (p0.y - p1.y - sqrt(b * a + p1.y * p1.y - p0.y * p2.y)) / a
        if (t.isNaN()) return null
        return seg.position(abs(t))
    } else {
        return Vector2(c.segments[0].start.x, tp.height)
    }
}

data class DrawSettings(
    @DoubleParameter("Mark radius", 0.1, 10.0, order = 0)
    var markRadius: Double = .5,

    @DoubleParameter("Tree separation", 0.0, 100.0, order = 5)
    var treeSeparation: Double = 30.0,

    @BooleanParameter("Draw Nodes", order = 9)
    var drawNodes: Boolean = false,

    @BooleanParameter("Carve Inwards")
    var carveInwards: Boolean = true,

    @DoubleParameter("Connector radius, ", 0.0, 6.0, order = 10)
    var connectorRadius: Double = 1.0,

    @BooleanParameter("Connector at Top", order = 11)
    var connectorTop: Boolean = true,

    @DoubleParameter("Vertical Edge Width", 0.1, 5.0, order = 20)
    var verticalEdgeWidth: Double = 2.5,

    @DoubleParameter("Vertical mapped Ratio", 0.1, 1.0, order = 21)
    var verticalMappedRatio: Double = 0.7,

    @DoubleParameter("Horizontal Edge Width", 0.1, 5.0, order = 22)
    var horizontalEdgeWidth: Double = verticalEdgeWidth / 9,

    @DoubleParameter("Non Mapped Vertical Edge Width", 0.1, 5.0, order = 23)
    var nonMappedVerticalEdges: Double = verticalEdgeWidth / 9,

    @BooleanParameter("Collapse non mapped", order = 24)
    var collapseNonMapped: Boolean = true,

    @BooleanParameter("Thin non-mapped", order = 25)
    var thinNonMapped: Boolean = true,

    @DoubleParameter("Path Area Scale", 0.0, 3.0)
    var pathAreaPatchScale: Double = 2.0,

    @DoubleParameter("Patch Area Stroke Scale", 0.0, 0.5)
    var patchStrokeScale: Double = 0.15,

    @DoubleParameter("Blob radius", 0.1, 10.0)
    var blobRadius: Double = 4.0,

    @DoubleParameter("Non-mapped blob radius scale", 0.1, 1.0)
    var nonMappedRadius: Double = 0.5,

    @DoubleParameter("Gridline Thickness", 0.01, 0.5, order = 50)
    var gridlineThickness: Double = 0.2,

    @DoubleParameter("Gridline padding", 1.0, 50.0, order = 51)
    var gridlinePadding: Double = 10.0,

//    @DoubleParameter("Whiten", 0.0, 1.0)
    var whiten: Double = 0.0,

//    @ColorParameter("Background color")
    var bgColor: ColorRGBa = ColorRGBa.WHITE,// ColorRGBa.fromHex("#D3D3D3"),

//    @DoubleParameter("Blacken", 0.0, 1.0)
    var blacken: Double = 0.0
    )

data class GlobalColorSettings(
    @BooleanParameter("Enable Gradient")
    var enableGradient: Boolean = false,

    @ColorParameter("EdgeColor1", order = 0)
    var edgeColor: ColorRGBa = ColorRGBa.BLACK,

    @ColorParameter("EdgeColor2", order  = 1)
    var edgeColor2: ColorRGBa = ColorRGBa.BLACK,

    @ColorParameter("Grid color", order = 10)
    var gridColor: ColorRGBa = ColorRGBa.BLACK,

    @DoubleParameter("Grid alpha", 0.01, 1.0, order = 11)
    var gridAlpha: Double = 0.15
)

data class DivergingColorSettings(
    @DoubleParameter("Hue 1", 0.0, 360.0, order=10)
    var hue1: Double = 255.0,

    @DoubleParameter("Hue 2", 0.0, 360.0, order=20)
    var hue2 : Double = 25.0,

    @DoubleParameter("Saturation 1", 0.0, 1.0, order=30)
    var sat1: Double = 0.8,

    @DoubleParameter("Saturation 2", 0.0, 1.0, order=40)
    var sat2: Double = 0.8,

    @DoubleParameter("Saturation 3", 0.0, 1.0, order=50)
    var sat3: Double = 0.8,

    @DoubleParameter("Lightness 1", 0.0, 1.0, order=60)
    var lig1: Double = 0.5,

    @DoubleParameter("Lightness 2", 0.0, 1.0, order=70)
    var lig2: Double = 0.7,

    @DoubleParameter("Lightness 3", 0.0, 1.0, order=80)
    var lig3: Double = 0.9,
)

data class ThreeColorSettings(
    //@ColorParameter
    //pathColor parameter here

    //Tree 1
    @ColorParameter("Tree1 color1 hexcode")
//    var t1c1: ColorRGBa = ColorRGBa(49 / 255.0,  135 / 255.0, 188 / 255.0),
//    var t1c1: ColorRGBa = ColorRGBa.fromHex("#C5037D"), //purple
//    var t1c1: ColorRGBa = ColorRGBa.fromHex("#66c2a5"), //purple
//    var t1c1: ColorRGBa = ColorRGBa.fromHex("#1b9e77"), //purple
    var t1c1: ColorRGBa = ColorRGBa(0.7333333772420884,0.2952000176752698, 0.27866668335199357),
//    var t1c1: ColorRGBa = ColorRGBa.fromHex("#E41A1C"),

    @ColorParameter("Tree1 color2 hexcode")
//    var t1c2: ColorRGBa = ColorRGBa(85 / 255.0,  164 / 255.0, 189 / 255.0), //
//    var t1c2: ColorRGBa =  ColorRGBa.fromHex("#E96222"), //orange
//    var t1c2: ColorRGBa =  ColorRGBa.fromHex("#a6d854"), //light-blue
    var t1c2: ColorRGBa =  ColorRGBa.fromHex("#66a61e"), //light-blue
//    var t1c2: ColorRGBa =  ColorRGBa.fromHex("#377EB8"),

    @ColorParameter("Tree1 color3 hexcode")
//    var t1c3: ColorRGBa = ColorRGBa(133 / 255.0, 120 / 255.0, 220 / 255.0),//
//    var t1c3: ColorRGBa =  ColorRGBa.fromHex("#FCC60E"), //yellow
//    var t1c3: ColorRGBa =  ColorRGBa.fromHex("#8da0cb"), //yellow
    var t1c3: ColorRGBa =  ColorRGBa.fromHex("#7570b3"), //yellow
 //   var t1c3: ColorRGBa =  ColorRGBa.fromHex("#4DAF4A"),

    //Tree2
    @ColorParameter("Tree2 color1 hexcode")
//    var t2c1: ColorRGBa = ColorRGBa(212 / 255.0,  61 / 255.0, 79 / 255.0),//
//    var t2c1: ColorRGBa =  ColorRGBa.fromHex("#454F96"), //dark-blue
//    var t2c1: ColorRGBa =  ColorRGBa.fromHex("#e78ac3"), //dark-blue
    var t2c1: ColorRGBa =  ColorRGBa.fromHex("#e7298a"), //dark-blue
  //  var t2c1: ColorRGBa =  ColorRGBa.fromHex("#E41A1C"),

    @ColorParameter("Tree2 color2 hexcode")
//    var t2c2: ColorRGBa = ColorRGBa(244 / 255.0, 108 / 255.0, 67 / 255.0),//
//    var t2c2: ColorRGBa =  ColorRGBa.fromHex("#e78ac3"), //light-blue
//    var t2c2: ColorRGBa =  ColorRGBa.fromHex("#fc8d62"), //orange
    var t2c2: ColorRGBa =  ColorRGBa.fromHex("#e6ab02"), //orange
//    var t2c2: ColorRGBa =  ColorRGBa.fromHex("#377EB8"),

    @ColorParameter("Tree2 color3 hexcode")
//    var t2c3: ColorRGBa = ColorRGBa(250 / 255.0, 155 / 255.0, 26 / 255.0)///
//    var t2c3: ColorRGBa =  ColorRGBa.fromHex("#8DBB25") //green
    var t2c3: ColorRGBa =  ColorRGBa.fromHex("#d95f02") //green
 //   var t2c3: ColorRGBa =  ColorRGBa.fromHex("#4DAF4A")
) {
//    constructor(dcs: DivergingColorSettings) : this(ColorHSVa(dcs.hue1, dcs.sat1, dcs.val1).toRGBa(), ColorHSVa(dcs.hue1, dcs.sat2, dcs.val2).toRGBa(), ColorHSVa(dcs.hue1, dcs.sat3, dcs.val3).toRGBa(),
//                                                    ColorHSVa(dcs.hue2, dcs.sat1, dcs.val1).toRGBa(), ColorHSVa(dcs.hue2, dcs.sat2, dcs.val2).toRGBa(), ColorHSVa(dcs.hue2, dcs.sat3, dcs.val3).toRGBa())
//    constructor(dcs: DivergingColorSettings) : this(ColorOKHSVa(dcs.hue1, dcs.sat1, dcs.val1).toRGBa(), ColorOKHSVa(dcs.hue1, dcs.sat2, dcs.val2).toRGBa(), ColorOKHSVa(dcs.hue1, dcs.sat3, dcs.val3).toRGBa(),
//        ColorOKHSVa(dcs.hue2, dcs.sat1, dcs.val1).toRGBa(), ColorOKHSVa(dcs.hue2, dcs.sat2, dcs.val2).toRGBa(), ColorOKHSVa(dcs.hue2, dcs.sat3, dcs.val3).toRGBa())
    constructor(dcs: DivergingColorSettings) : this(
    ColorOKHSLa(dcs.hue1, dcs.sat1, dcs.lig1).toRGBa(), ColorOKHSLa(dcs.hue1, dcs.sat2, dcs.lig2).toRGBa(), ColorOKHSLa(dcs.hue1, dcs.sat3, dcs.lig3).toRGBa(),
        ColorOKHSLa(dcs.hue2, dcs.sat1, dcs.lig1).toRGBa(), ColorOKHSLa(dcs.hue2, dcs.sat2, dcs.lig2).toRGBa(), ColorOKHSLa(dcs.hue2, dcs.sat3, dcs.lig3).toRGBa())
}

//val blue = ColorRGBa.fromHex("#8EBBD9")
//val red = ColorRGBa.fromHex("#F08C8D")
//val green = ColorRGBa.fromHex("#99CF95")
//val purple = ColorRGBa.fromHex("#AC8BD1")

enum class ColorInterpolationType {
    RGBLinear, HSVShort
}

data class GradientColorSettings(
    @OptionParameter("Interpolation type")
    var colorInterpolation: ColorInterpolationType = ColorInterpolationType.RGBLinear,

    @ColorParameter("Tree1 Gradient Start")
    var t1c1: ColorRGBa = ColorRGBa.fromHex("#f01d0e"), //red

    @ColorParameter("Tree1 Gradient End")
    var t1c2: ColorRGBa = ColorRGBa.fromHex("#e1ff69"), //yellow

    @ColorParameter("Tree2 Gradient Start")
    var t2c1: ColorRGBa = ColorRGBa.fromHex("#61faff"), //light blue

    @ColorParameter("Tree2 Gradient End")
    var t2c2: ColorRGBa = ColorRGBa.fromHex("#0e0ef0") //dark blue
)

fun example1(pos: Vector2): Visualization {
    val tree1 = parseTree(
        "(0" +
                "(11(30)(40(50)(50)))" +
                "(20.1(25)(30))" +
                "(15(22)(32(40)(37)(45)))" +
                ")"
    )
    val tree2 = parseTree(
        "(0" +
                "(10(40)(30(35)(38(50)(51))))" + //"(10(40)(30(35)(38(51)(51))))" +  //
                "(20)" +
                "(11(15)(20))" +
                "(15(31)(32(45)(50)))" +
                ")"
    )

    return Visualization(tree1, tree2, pos) { tree1E, tree2E ->
        monotoneInterleaving(tree1E, tree2E)
    }
}

fun example2(pos: Vector2): Visualization {
    val tree1 = parseTree("(0(10)(20))")
    val tree2 = parseTree("(0(8)(20))")

    return Visualization(tree1, tree2, pos) { tree1E, tree2E ->
        monotoneInterleaving(tree1E, tree2E)
    }
}

fun example3(pos: Vector2): Visualization {
    val tree1 = parseTree("(0(40)(10(25)(35)))")
    val tree2 = parseTree("(0(10(35)(25))(40))")

    return Visualization(tree1, tree2, pos) { tree1E, tree2E ->
        monotoneInterleaving(tree1E, tree2E)
    }
}

fun example4(pos: Vector2): Visualization {
    val tree1 = parseTree("(0" +
            "(25(35)(40(50)(55(70)(65)(60)(70))(50)))" +
            "(5(15(25)(20))(10)(30(40)(35)))" +
            "(10(15)(30(50)(55))(25))" +
            "(15(35)(50(55)(60)(65))(20))" +
            "(5(35(45(65)(55)(60))(40)(40))(15))" +
            "(5(15)(25(35)(30)))" +
            "(35(55)(40)(45(60(65)(65)(70))(55)(65)))" +
            "(20(35)(30)(35)(40(55)(50)(45))(30(35)(35)))" +
            ")"
    )
    val tree2 = parseTree("(0" +
            "(25(35)(40(50)(55(70)(65)(60)(70))(50)))" +
            "(5(15(25)(20))(10)(30(40)(35)))" +
            "(10(15)(30(50)(55))(25))" +
            "(15(35)(50(55)(60)(65))(20))" +
            "(5(35(45(65)(55)(60))(40)(40))(15))" +
            "(5(15)(25(35)(30)))" +
            "(35(55)(40)(45(60(65)(65)(70))(55)(65)))" +
            "(20(35)(30)(35)(40(55)(50)(45))(30(35)(35)))" +
            ")"
    )

    return Visualization(tree1, tree2, pos) { tree1E, tree2E ->
        monotoneInterleaving(tree1E, tree2E)
    }
}

fun example7(pos: Vector2): Visualization {
    val tree1 = parseTree("(0" +
            "(5(15)(25(35)(30)))" +
            "(35(55)(40)(45(60(65)(65)(70))(55)(65)))" +
            "(20(35)(30)(35)(40(55)(50)(45))(30(35)(35)))" +
            ")"
    )
    val tree2 = parseTree("(0" +
            "(5(15)(25(35)(30)))" +
            "(35(55)(40)(45(60(65)(65)(70))(55)(65)))" +
            "(20(35)(30)(35)(40(55)(50)(45))(30(35)(35)))" +
            ")"
    )

    return Visualization(tree1, tree2, pos) { tree1E, tree2E ->
        monotoneInterleaving(tree1E, tree2E)
    }
}

fun example5(pos: Vector2): Visualization {
    val tree1 = parseTree("(0" +
            "(25(35)(40(50)(55(70)(65)(60)(70))(50)))" +
            "(5(15(25)(20))(10)(30(40)(35)))" +
            "(10(15)(30(50)(55)))" +
            "(15(35)(50(55)(60)(65))(20)(25))" +
            "(5(35(45(65)(55)(60))(40)(40)))" +
            "(5(15)(25(35)(30)))" +
            "(35(55)(40)(45(60(65)(65)(70))(55)))" +
            "(20(40(55)(50)(45))(30(35)(35)))" +
            ")"
    )
    val tree2 = parseTree("(0" +
            "(25(35)(40(50)(55(70)(65)(60)(70))(50)))" +
            "(5(15(25)(20))(10)(30(40)(35)))" +
            "(10(15)(30(50)(55)))" +
            "(15(35)(50(55)(60)(65))(20)(25))" +
            "(5(35(45(65)(55)(60))(40)(40)))" +
            "(5(15)(25(35)(30)))" +
            "(35(55)(40)(45(60(65)(65)(70))(55)))" +
            "(20(40(55)(50)(45))(30(35)(35)))" +
            ")"
    )

    return Visualization(tree1, tree2, pos) { tree1E, tree2E ->
        monotoneInterleaving(tree1E, tree2E)
    }
}

fun example6(pos: Vector2): Visualization {
    val tree1 = parseTree("(0.001(100)(161.19(687.26)(164.53(193.7(248.72(399.4(526.43)(448.79999999999995(476.65999999999997(896.8699999999999)(500.17999999999995(741.73)(634.89)))(515.78)))(357.43(809.9499999999999)(383.91999999999996(461.3)(441.74))))(193.75(1000.0)(263.58(399.4(526.3)(413.39(448.79999999999995(896.0)(515.78))(416.60999999999996(498.57(741.11)(634.64))(437.41(506.12)(491.14000000000004)))))(357.06(810.45)(390.61(460.69)(441.62))))))(221.73000000000002))))")
    val test = parseTree("(0.001(100)(161.19(687.26)(164.53(193.7(248.72(399.4(526.43)(448.79999999999995))))))))) ") //(476.65999999999997(896.8699999999999))))))))) ")//(500.17999999999995(741.73)(634.89)))(515.78)))") //(357.43(809.9499999999999)(383.91999999999996(461.3)(441.74))))(193.75(1000.0)(263.58(399.4(526.3)(413.39(448.79999999999995(896.0)(515.78))(416.60999999999996(498.57(741.11)(634.64))(437.41(506.12)(491.14000000000004)))))(357.06(810.45)(390.61(460.69)(441.62))))))(221.73000000000002))))")

    val tree2 = parseTree("(1e-06(0.16119(0.68726)(0.16453(0.1937(0.24872(0.3994(0.52643)(0.4488(0.47666(0.89687)(0.50018(0.74173)(0.63489)))(0.51578)))(0.35743(0.80995)(0.38392(0.4613)(0.44174))))(0.19375(1.0)(0.26358(0.3994(0.5263)(0.41339(0.4488(0.896)(0.51578))(0.41661(0.49857(0.74111)(0.63464))(0.43741(0.50612)(0.49114)))))(0.35706(0.81045)(0.39061(0.46069)(0.44162))))))(0.22173))))")

    return Visualization(tree1, tree1, pos) { tree1E, tree2E ->
        monotoneInterleaving(tree1E, tree2E)
    }
}

fun realExample1(pos: Vector2): Visualization { //Time step 25 vs 26
    val tree1 = parseTree("(0.001(161.19(687.26)(193.75(248.72(399.4(476.65999999999997(896.8699999999999)(500.17999999999995(741.73)(634.89)))(526.43))(357.43(809.9499999999999)(461.3)))(195.09(1000.0)(263.58(399.4(413.39(896.0)(498.57(741.11)(634.64)))(526.3))(357.06(810.45)(460.69)))))))")
    val tree2 = parseTree("(0.001(185.5(774.2099999999999)(220.22(289.54(455.62(502.16(940.98)(632.28(819.9100000000001)(810.31)))(593.16))(413.07(996.29)(550.33)))(221.17999999999998(1000.0)(291.19(455.62(550.06(942.49)(627.48(822.25)(809.76)))(593.3000000000001))(402.5(994.9200000000001)(550.33)))))))")

    return Visualization(tree1, tree2, pos) { tree1E, tree2E ->
        monotoneInterleaving(tree1E, tree2E)
    }
}
fun realExample2(pos: Vector2): Visualization {
    val tree1 = parseTree("(0.001(161.19(687.26)(164.53(193.7(248.72(399.4(526.43)(448.79999999999995(476.65999999999997(896.8699999999999)(500.17999999999995(741.73)(634.89)))(515.78)))(357.43(809.9499999999999)(383.91999999999996(461.3)(441.74))))(193.75(1000.0)(263.58(399.4(526.3)(413.39(448.79999999999995(896.0)(515.78))(416.60999999999996(498.57(741.11)(634.64))(437.41(506.12)(491.14000000000004)))))(357.06(810.45)(390.61(460.69)(441.62))))))(221.73000000000002))))")
    val tree2 = parseTree("(0.001(185.5(774.2099999999999)(220.22(289.54(455.62(502.16(940.98)(632.28(819.9100000000001)(810.31)))(593.16))(413.07(996.29)(550.33)))(221.17999999999998(1000.0)(291.19(455.62(550.06(942.49)(627.48(822.25)(809.76)))(593.3000000000001))(402.5(994.9200000000001)(550.33)))))))")
    //val tree3 = parseTree("(0.001(161.19(687.26)(193.75(248.72(399.4(476.65999999999997(896.8699999999999)(500.17999999999995(741.73)(634.89)))(526.43))(357.43(809.9499999999999)(461.3)))(195.09(1000.0)(263.58(399.4(413.39(896.0)(498.57(741.11)(634.64)))(526.3))(357.06(810.45)(460.69)))))))")

    //val tree2 = parseTree("(0.001(161.19(687.26)(164.53(193.7(248.72(399.4(526.43)(448.79999999999995(476.65999999999997(896.8699999999999)(500.17999999999995(741.73)(634.89)))(515.78)))(357.43(809.9499999999999)(383.91999999999996(461.3)(441.74))))(193.75(1000.0)(263.58(399.4(526.3)(413.39(448.79999999999995(896.0)(515.78))(416.60999999999996(498.57(741.11)(634.64))(437.41(506.12)(491.14000000000004)))))(357.06(810.45)(390.61(460.69)(441.62))))))(221.73000000000002))))")

    return Visualization(tree1, tree2, pos) { tree1E, tree2E ->
        monotoneInterleaving(tree1E, tree2E)
    }
}
fun realExample3(pos: Vector2): Visualization { //Time step 26 vs 75
    val tree1 = parseTree("(0.001(185.5(774.2099999999999)(220.22(289.54(455.62(502.16(940.98)(632.28(819.9100000000001)(810.31)))(593.16))(413.07(996.29)(550.33)))(221.17999999999998(1000.0)(291.19(455.62(550.06(942.49)(627.48(822.25)(809.76)))(593.3000000000001))(402.5(994.9200000000001)(550.33)))))))")
    val tree2 = parseTree("(0.001(168.17(193.52(563.5799999999999)(193.73000000000002(733.6899999999999(1000.0)(996.4399999999999))(563.29)))(343.62(530.61)(343.98(644.89)(529.83)))))")

    return Visualization(tree1, tree2, pos) { tree1E, tree2E ->
        monotoneInterleaving(tree1E, tree2E)
    }
}

fun largeExample2(pos: Vector2): Visualization { //timestep 0025
    val tree1 = parseTree("(1e-06(0.084303(0.16119(0.44434(0.68726)(0.4826))(0.16453(0.19375(0.24872(0.26234(0.35743(0.80995)(0.38392(0.4613)(0.39507(0.44174)(0.40794))))(0.27844))(0.26742(0.38999(0.3994(0.4488(0.51578)(0.47666(0.50018(0.63489)(0.50786(0.74173)(0.52643)))(0.4826(0.53126(0.54525(0.71821(0.89687)(0.73344))(0.57013))(0.54859))(0.50699))))(0.48025(0.52643)(0.50637)))(0.40249))(0.27819)))(0.19385(0.26358(0.3994(0.48037(0.5263)(0.50637))(0.41339(0.4488(0.51578)(0.47851(0.54549(0.896)(0.57013))(0.50711)))(0.41661(0.49857(0.57261(0.63464)(0.58276))(0.51343(0.74111)(0.52593)))(0.43741(0.50612)(0.44335(0.49114)(0.47629))))))(0.29094(0.35706(0.81045)(0.39061(0.46069)(0.44162)))(0.30308)))(0.22247(0.25207(0.311(0.33267(0.34517(0.39073(1.0)(0.40138))(0.37092))(0.35186))(0.32734))(0.27088))(0.23312))))(0.22173)))(0.089764(0.11142)(0.10713))))")
    val tree1Adjusted = parseTree("(1e-06(0.084303(0.16119(0.44434(0.68726)(0.4826))(0.17453(0.19375(0.24872(0.26234(0.35743(0.80995)(0.38392(0.4613)(0.39507(0.44174)(0.40794))))(0.27844))(0.26742(0.38999(0.44(0.63489)(0.50786(0.74173)(0.52643))(0.50(0.53126(0.54525(0.71821(0.89687)(0.73344))(0.57013))(0.54859))(0.50699)))(0.48025(0.52643)(0.50637))))(0.27819)))(0.19385(0.26358(0.3994(0.4288(0.51578)(0.47851(0.54549(0.896))(0.50711))(0.49857(0.57261(0.63464)(0.58276))(0.51343(0.74111)(0.52593)))(0.44335(0.50612)(0.49114)(0.47629))))(0.29094(0.35706(0.81045)(0.39061(0.46069)(0.44162)))(0.30308)))(0.22247(0.34517(0.39073(1.0)(0.40138))(0.37092)))(0.27088))(0.23312))(0.22173)))(0.089764(0.11142)(0.10713))))")
    val tree4Adjusted = parseTree("(1e-06(0.084303(0.16119(0.44434(0.68726)(0.4826))(0.17453(0.19375(0.24872(0.26234(0.35743(0.80995)(0.38392(0.4613)(0.39507(0.44174)(0.40794))))(0.27844))(0.26742(0.38999(0.44(0.63489)(0.50786(0.74173)(0.52643))(0.50(0.53126(0.54525(0.71821(0.89687)(0.73344))(0.57013))(0.54859))(0.50699)))(0.48025(0.52643)(0.50637))))(0.27819)))(0.19385(0.26358(0.3994(0.4288(0.51578)(0.47851(0.54549(0.896))(0.50711))(0.49857(0.57261(0.63464)(0.58276))(0.51343(0.74111)(0.52593)))(0.44335(0.50612)(0.49114)(0.47629))))(0.29094(0.35706(0.81045)(0.39061(0.46069)(0.44162)))(0.30308)))(0.22247(0.34517(0.39073(1.0)(0.40138))(0.37092)))(0.27088))(0.23312))(0.22173)))(0.089764(0.11142)(0.11713))))")
    val tree2 = parseTree("(1e-06(0.092946(0.1855(0.22022(0.28954(0.30738(0.41307(0.99629)(0.48596(0.50531(0.55033)(0.54896))(0.50765)))(0.33538))(0.30587(0.45562(0.54141(0.59316)(0.56859))(0.50216(0.50545(0.59714(0.8589(0.94098)(0.92643))(0.63063))(0.57641))(0.51945(0.63228(0.81031)(0.69418(0.81991)(0.75074)))(0.5211(0.57147)(0.53757(0.55953)(0.55102))))))(0.31946)))(0.22118(0.29119(0.4025(0.99492)(0.43092(0.49296(0.51025(0.55033)(0.54855))(0.50751))(0.45686)))(0.29709(0.43147(0.45562(0.50312(0.55006(0.597(0.87894(0.94249)(0.92684))(0.63063))(0.55143(0.62748(0.82225)(0.68073(0.80976)(0.69707)))(0.59714)))(0.57641))(0.54141(0.5933)(0.56859)))(0.44176))(0.3137)))(0.29613(0.3115(0.3535(0.37286(0.40607(0.45727(1.0)(0.47114))(0.42804))(0.39427))(0.36915))(0.33799))(0.3067))))(0.19195(0.47786(0.77421)(0.55184))(0.25701)))(0.099749(0.12359)(0.11917))))\n")
    val tree2Adjusted = parseTree("(1e-06(0.092946(0.1855(0.22022(0.24954(0.30738(0.41307(0.99629)(0.48596(0.50531(0.55033)(0.54896))(0.50765)))(0.33538))(0.30587(0.45562(0.54141(0.59316)(0.56859))(0.50216(0.50545(0.59714(0.8589(0.94098)(0.92643))(0.63063))(0.57641))(0.51945(0.63228(0.81031)(0.69418(0.81991)(0.75074)))(0.5211(0.57147)(0.53757(0.55953)(0.55102))))))(0.31946)))(0.22118(0.29119(0.4025(0.99492)(0.43092(0.49296(0.51025(0.55033)(0.54855))(0.50751))(0.45686)))(0.29709(0.43147(0.55143(0.597(0.87894(0.94249)(0.92684))(0.63063))(0.62748(0.82225)(0.68073(0.80976)(0.69707))(0.64714)))(0.54141(0.5933)(0.56859)))(0.44176))(0.3137)))(0.29613(0.3115(0.3535(0.37286(0.40607(0.45727(1.0)(0.47114))(0.42804))(0.39427))(0.36915))(0.33799))(0.3067))))(0.19195(0.47786(0.77421)(0.55184))(0.25701)))(0.099749(0.12359)(0.11917))))\n")


    return Visualization(tree1Adjusted, tree2Adjusted, pos) { tree1E, tree2E ->
        monotoneInterleaving(tree1E, tree2E)
    }
}

fun largeExample1(pos: Vector2): Visualization {
    val tree1 = parseTree("(1e-06(0.084303(0.16119(0.44434(0.68726)(0.4826))(0.16453(0.19375(0.24872(0.26234(0.35743(0.80995)(0.38392(0.4613)(0.39507(0.44174)(0.40794))))(0.27844))(0.26742(0.38999(0.3994(0.4488(0.51578)(0.47666(0.50018(0.63489)(0.50786(0.74173)(0.52643)))(0.4826(0.53126(0.54525(0.71821(0.89687)(0.73344))(0.57013))(0.54859))(0.50699))))(0.48025(0.52643)(0.50637)))(0.40249))(0.27819)))(0.19475(0.26358(0.3994(0.48037(0.5263)(0.50637))(0.41339(0.4488(0.51578)(0.47851(0.54549(0.896)(0.57013))(0.50711)))(0.41661(0.49857(0.57261(0.63464)(0.58276))(0.51343(0.74111)(0.52593)))(0.43741(0.50612)(0.44335(0.49114)(0.47629))))))(0.29094(0.35706(0.81045)(0.39061(0.46069)(0.44162)))(0.30308)))(0.22247(0.25207(0.311(0.33267(0.34517(0.39073(1.0)(0.40138))(0.37092))(0.35186))(0.32734))(0.27088))(0.23312))))(0.22173)))(0.089764(0.11142)(0.10713))))")
    val tree2 = parseTree("(1e-06(0.092946(0.1855(0.22022(0.28954(0.30738(0.41307(0.99629)(0.48596(0.50531(0.55033)(0.54896))(0.50765)))(0.33538))(0.30587(0.45562(0.54141(0.59316)(0.56859))(0.50216(0.50545(0.59714(0.8589(0.94098)(0.92643))(0.63063))(0.57641))(0.51945(0.63228(0.81031)(0.69418(0.81991)(0.75074)))(0.5211(0.57147)(0.53757(0.55953)(0.55102))))))(0.31946)))(0.22118(0.29119(0.4025(0.99492)(0.43092(0.49296(0.51025(0.55033)(0.54855))(0.50751))(0.45686)))(0.29709(0.43147(0.45562(0.50312(0.55006(0.597(0.87894(0.94249)(0.92684))(0.63063))(0.55143(0.62748(0.82225)(0.68073(0.80976)(0.69707)))(0.59714)))(0.57641))(0.54141(0.5933)(0.56859)))(0.44176))(0.3137)))(0.29613(0.3115(0.3535(0.37286(0.40607(0.45727(1.0)(0.47114))(0.42804))(0.39427))(0.36915))(0.33799))(0.3067))))(0.19195(0.47786(0.77421)(0.55184))(0.25701)))(0.099749(0.12359)(0.11917))))")

    return Visualization(tree1, tree2, pos) { tree1E, tree2E ->
        monotoneInterleaving(tree1E, tree2E)
    }
}

fun volcanicExampleSmall(pos: Vector2): Visualization {
    val tree1 = parseTree("(0.56233(0.90966(1.0633(1.149(6.4553)(4.9931))(6.0679))(1.2913(6.2512)(1.6497(8.8859)(8.8254))))(4.5984))")
    val tree2 = parseTree("(0.33197(0.85816(5.8418)(1.1753(1.2979(5.4803)(1.4873(5.3434)(4.9546)))(5.1361)))(5.6036))")

    return Visualization(tree1, tree2, pos) { tree1E, tree2E ->
        monotoneInterleaving(tree1E, tree2E)
    }
}

fun ionizationExample(pos: Vector2): Visualization { //TS 25 vs 26 -> space-filling curve
    val tree1 = parseTree("(0.16119(0.68726)(0.19375(0.19509(0.26358(0.3994(0.41339(0.49857(0.74111)(0.63464))(0.896))(0.5263))(0.35706(0.81045)(0.46069)))(1.0))(0.24872(0.35743(0.4613)(0.80995))(0.3994(0.47666(0.50018(0.63489)(0.74173))(0.89687))(0.52643)))))")
    val tree2 = parseTree("(0.1855(0.77421)(0.22022(0.28954(0.45562(0.50216(0.63228(0.81031)(0.81991))(0.94098))(0.59316))(0.41307(0.99629)(0.55033)))(0.22118(1.0)(0.29119(0.4025(0.55033)(0.99492))(0.45562(0.55006(0.62748(0.82225)(0.80976))(0.94249))(0.5933))))))")

    return Visualization(tree1, tree2, pos) { tree1E, tree2E ->
        monotoneInterleaving(tree1E, tree2E)
    }
}

fun ionizationExample2(pos: Vector2): Visualization { //TS 25 vs 75 -> space-filling curve
    val tree1 = parseTree("(0.16119(0.68726)(0.19375(0.19509(0.26358(0.3994(0.41339(0.49857(0.74111)(0.63464))(0.896))(0.5263))(0.35706(0.81045)(0.46069)))(1.0))(0.24872(0.35743(0.4613)(0.80995))(0.3994(0.47666(0.50018(0.63489)(0.74173))(0.89687))(0.52643)))))")
    val tree2 = parseTree("(0.1855(0.77421)(0.22022(0.28954(0.45562(0.50216(0.63228(0.81031)(0.81991))(0.94098))(0.59316))(0.41307(0.99629)(0.55033)))(0.22118(1.0)(0.29119(0.4025(0.55033)(0.99492))(0.45562(0.55006(0.62748(0.82225)(0.80976))(0.94249))(0.5933))))))")
    val tree3 = parseTree("(0.16817(0.34362(0.34398(0.39567(0.49258)(0.64489))(0.52983))(0.53061))(0.19352(0.31891(0.56358)(0.37331))(0.19373(0.73369(1.0)(0.99644))(0.31898(0.56329)(0.37324)))))")
    return Visualization(tree1, tree3, pos) { tree1E, tree2E ->
        monotoneInterleaving(tree1E, tree2E)
    }
}

fun vulc_001_ts150am_vs_151am(pos: Vector2): Visualization {
    val tree1 = parseTree(
        "(-0.1849(-0.14488(-0.13844(-0.13532(-0.084409(-0.055514(-0.052873(-0.028506(-0.026653(-0.015689(-0.013896(-0.01155(3.1347e-42(3.23e-42(3.244e-42(5.6893e-42(7.2125e-42(7.2531e-42(1.4401e-41(2.6314e-41(3.5816e-41(3.6822e-41(6.8584e-41(0.0029319(0.0064811(0.0088814(0.014683(0.016272(0.017924(0.018978(0.020555(0.025838(0.026316(0.027118(0.028677(0.035235(0.035527(0.042846(0.045261(0.046837(0.047553(0.054133(0.054733(0.056774(0.059066(0.059621(0.06129(0.06432(0.065924(0.068043(0.068149(0.072381(0.074499(0.076383(0.08549(0.086804(0.087982(0.088332(0.089725(0.09078(0.091933(0.09305(0.09616(0.099006(0.10129(0.1039(0.10494(0.10645(0.10759(0.11067(0.11072(0.11293(0.11365(0.11457(0.11546(0.11694(0.11887(0.1192(0.12236(0.12246(0.1237(0.12485(0.12528(0.12787(0.12931(0.13(0.1376(0.13958(0.14083(0.14211(0.14519(0.14974(0.1499(0.15156(0.15265(0.15479(0.16032(0.16292(0.1662(0.16776(0.16807(0.16857(0.17011(0.17204(0.17312(0.17319(0.17371(0.17389(0.17427(0.17571(0.17643(0.17695(0.17761(0.17788(0.18193(0.18343(0.18663(0.23555(0.2574(0.27672(0.28092(0.28579(0.29422(0.30205(0.3128(0.33943(0.36463(0.39113(1.2104)(0.40478(0.41948(0.42086(1.0042)(0.47417(0.48915(0.52847(0.53859(0.72757(0.9258(1.5149)(1.4273))(0.73031(0.7454(1.4159)(0.75765(1.4157)(1.3143)))(1.3539)))(1.207))(0.57615(1.1231)(0.59285(1.1994)(0.63468(1.1561)(1.2528)))))(0.99066))(1.3463)))(0.9619))(1.0594)))(0.911))(1.2126))(0.81694))(0.82029))(0.82562))(0.80026))(0.98943)(0.85805))(0.92333))(0.8891))(0.77762))(0.78661))(0.69159))(0.73306))(0.17804(0.17858(0.17892(0.17907(0.18121(0.18299(0.18391(0.18474(0.18628(0.18758(0.19034(0.19115(0.19123(0.19354(0.19396(0.19499(0.1969(0.197(0.19711(0.19991(0.20146(0.20343(0.20453(0.20472(0.20524(0.20639(0.20864(0.20939(0.20976(0.21107(0.21203(0.2151(0.21717(0.21896(0.23245(0.23621(0.24727(0.28557(0.35369(0.8657)(1.189))(1.0728))(0.24757(0.24804(0.26558(0.2668(0.27431(0.27711(0.28887(0.29175(0.38638(0.49518(1.4085)(1.4718))(1.0679))(0.30076(0.30528(0.31064(0.31335(0.32035(0.33191(0.35705(0.38162(0.3919(0.39348(0.39653(0.40247(1.0121)(0.42917(0.44567(0.45181(0.45866(0.46068(0.46117(0.46464(0.46996(1.9884)(1.0273))(1.0833))(1.5237))(0.46873(0.47533(0.50189(0.53081(0.59466(0.68291(0.69081(1.208)(1.3817))(0.6837(0.68456(0.69513(0.71624(1.9356)(1.2642))(0.75577(1.329)(2.1832)))(0.72335(1.4585)(1.8588)))(0.68444(1.3016)(1.7607))))(1.8927))(1.0667))(1.1571))(1.0859))(0.48364(0.59366(1.1694)(1.2064))(1.0998))))(0.49437(1.3066)(0.50567(1.519)(1.0753))))(1.0536))(1.1662))(1.132)))(0.60844(1.2032)(1.6765)))(0.96739))(1.0011))(0.48669(0.56358(0.58337(0.59735(0.64452(0.66861(1.3442)(0.7297(0.74622(1.349)(1.4343))(1.607)))(1.6072))(1.1058))(1.3818))(1.2096))(0.50802(1.2143)(0.53038(1.3818)(1.0558)))))(1.7061))(0.88539))(0.82603))(0.93423))(0.93421))(0.9728))(1.1222)))(0.78953))(1.0014))(0.35236(0.42306(1.2504)(1.0577))(1.2414)))(0.27412(0.27885(0.31111(0.31319(0.35274(0.3918(1.0285)(0.40358(0.4267(1.1751)(1.0046))(0.42186(0.45981(1.3968)(0.46546(1.2872)(1.0792)))(0.441(0.48046(1.0444)(1.2304))(1.3252)))))(1.1102))(1.3708))(0.88563))(1.0575))(0.29005(0.29721(0.31251(0.34546(1.0183)(0.89636))(0.3373(0.34418(0.35588(0.38858(0.3997(0.39992(1.0166)(0.42962(0.50768(0.52261(1.7175)(0.61602(1.3626)(0.62314(1.4121)(0.87508(1.5598)(1.4112)))))(1.0488))(1.2316)))(0.41553(0.45288(0.96202)(0.50816(1.1328)(1.5836)))(0.97273)))(0.39519(0.43605(2.1574)(1.4291))(1.0521)))(1.0751))(0.35095(0.35498(0.87056)(0.86929))(0.35921(0.36965(1.0036)(0.44188(0.48007(0.51978(1.0273)(1.1282))(1.0095))(0.55169(1.1001)(1.1761))))(0.90562))))(1.0196)))(0.98826))(1.0404))))(1.0161))(1.2317))(1.2765)))(0.83419))(0.29396(0.80673)(0.95991)))(0.24168(0.27497(0.29708(1.0343)(0.80015))(0.99662))(0.99233)))(0.83856))(0.74215))(0.21439(0.2145(0.21644(0.21783(0.21989(0.22225(0.22492(0.22649(0.22922(0.23111(0.23165(0.23276(0.23647(0.24136(0.24149(0.24328(0.24399(0.24489(0.24676(0.25124(0.25236(0.25239(0.25313(0.25869(0.25882(0.26237(0.27022(0.27059(0.27133(0.2728(0.27329(0.27426(0.27617(0.27885(0.27947(0.27987(0.28255(0.28262(0.28554(0.28673(0.28809(0.28903(0.29003(0.29101(0.29234(0.29619(0.29704(0.29772(0.29911(0.29965(0.30069(0.30075(0.30206(0.30557(0.30724(0.30908(0.30942(0.31152(0.31408(0.31476(0.31596(0.31652(0.31779(0.31817(0.31843(0.32073(0.32187(0.32193(0.32468(0.32616(0.33006(0.33273(0.33667(0.33723(0.34034(0.34044(0.34735(0.34906(0.34978(0.35109(0.35245(0.35579(0.37141(0.37206(0.37272(0.47976(0.53293(0.54702(0.56233(0.68925(0.73845(0.75822(0.99383(1.5521)(1.6115))(1.6172))(0.78882(0.87766(0.90888(0.90966(0.91708(1.0202(1.0203(1.0308(1.0633(1.149(1.2783(1.3305(1.3692(3.0525)(1.5068(1.7275(2.2415)(1.7706(3.0313)(2.3102)))(2.1015)))(1.6016(2.3808)(1.767(1.8314(2.6202)(3.5394))(2.0796(2.1613(2.2348(2.2762(2.7221(2.9838(3.7475(5.4041)(4.5241))(3.7963))(3.0299(5.3046)(3.5413(4.8258)(4.6014(5.2849)(6.4553)))))(3.322))(4.6495))(2.8747))(2.1918(3.3833)(3.0955))))))(1.7872))(1.2378(2.7121)(1.4702(1.5732(1.58(2.1485)(1.8368(4.0441)(4.9931)))(2.1676(2.8531)(2.1864(4.4632)(3.0053))))(2.5431))))(1.2128(1.5599(1.6748(2.3059)(1.7482(2.1792(3.1057)(6.0679))(3.4702)))(2.4629))(2.2537)))(1.7334))(1.0704(1.0799(2.5978)(1.4073(1.9415)(2.3772)))(2.8898)))(1.6388(3.2013)(1.7112(2.5266)(1.9346(2.9575)(2.7471)))))(1.431))(1.2913(1.5769(2.439(2.6935(2.7559(3.3537)(2.9171(3.6034)(6.2512)))(3.3313))(3.1854))(2.8557(3.9002)(4.3109)))(1.3124(1.4419(1.6497(2.1285(2.9368(3.762(8.8859)(4.6452))(3.6997))(2.7334))(1.744(2.8401(8.8254)(4.5904))(2.343)))(1.4896(3.1093)(2.1183)))(2.0418))))(1.9381))(2.0449)(1.6813))(1.3422)))(1.4906))(0.7556(1.3891(2.6198)(1.4653(2.3785(2.9089)(4.5984))(2.8905)))(1.7413)))(1.5418))(1.2031))(1.4703))(0.3894(0.39984(0.40249(0.47969(0.55661(1.4193)(1.1538))(1.1012))(0.43949(0.45595(0.94648)(0.46402(0.51133(0.54416(0.58725(1.3177)(1.5751))(0.60037(0.60037(1.2338)(0.60924(1.3601)(0.61655(1.4616)(1.6709))))(1.3429)))(0.54479(1.1801)(0.55269(1.2124)(1.1474))))(1.0086)))(0.96611)))(1.1518))(1.1422)))(1.0204))(1.3508))(0.35764(0.35791(0.35824(0.36238(0.36423(0.36634(0.36724(0.36741(0.36769(0.36931(0.37052(0.37231(0.37399(0.38117(0.38892(0.3982(0.91454)(0.40843(0.41651(0.41773(0.42172(0.46033(0.46533(0.49219(0.51013(0.5134(0.60487(1.221)(1.2217))(1.0205))(1.0907))(1.2431))(1.2578))(1.0583))(0.96616))(1.0765))(0.97108))(0.42004(0.42271(0.43256(0.44401(0.45445(0.47354(0.48484(0.64406(1.1554)(0.65903(1.2849)(1.1639)))(0.5081(0.55425(0.60925(0.65798(1.1784)(0.66679(0.68201(0.79519(1.5658)(1.4602))(1.3314))(1.2334)))(0.61741(1.234)(1.4216)(1.2925)))(1.1885))(1.1962)))(1.2323))(0.48989(1.0041)(1.5577)))(1.6524))(0.94874))(1.0178))(0.94192))))(0.89958))(1.0287))(0.43536(0.94705)(1.3239)))(0.38101(0.38234(0.39287(0.39559(0.40597(0.41426(0.42408(0.45789(0.45903(1.3012)(0.48528(1.3812)(0.59894(1.1118)(1.4459))))(0.99998))(0.93517))(0.45263(1.6174)(2.1225)(0.46419(0.5(0.58607(1.3101)(1.1652))(1.2868))(1.2391))))(1.0274))(0.40918(0.42455(1.6512)(1.1716))(1.4367)))(0.39711(0.40534(0.4061(0.41061(0.41289(1.2695)(0.45151(0.56589(1.1291)(0.59399(0.7055(1.3451)(1.5476))(1.1133)))(0.95784)))(0.43876(0.45249(0.50883(1.0386)(0.52095(0.63406(0.64266(1.4238)(0.68938(1.3424)(0.74808(1.5179)(1.2802))))(0.65045(1.463)(1.6377)))(0.53976(1.6688)(0.5775(1.5383)(1.4631)))))(0.46322(1.433)(0.47042(0.489(0.50973(0.52288(1.7934)(0.5311(1.2284)(0.5691(1.4496)(1.2697))))(0.54056(0.57956(1.1537)(1.4676))(1.2241)))(1.1654))(0.99518))))(0.44389(0.50752(1.021)(1.0089))(0.45369(1.0117)(1.4291)))))(0.93956))(1.0261))(0.92933)))(0.94804))(1.2223)))(0.42927(1.0786)(1.1064)))(1.0874))(0.88137))(0.94566))(0.88115))(1.02))(1.1849))(0.37101(0.37742(0.38729(0.9995)(0.4226(0.42341(1.3668)(0.42726(0.9971)(1.4531)))(0.42268(1.0464)(1.0306))))(0.88193))(0.48362(1.0105)(0.49595(0.64604(1.2719)(1.1693))(1.451))))(1.3289))(1.0))(0.36919(0.8943)(1.037)))(1.0714)))(1.192))(0.37021(0.91333)(0.90508)))(0.91433))(1.4094))(0.91807))(0.34156(0.34307(0.37135(0.37804(0.40869(1.3644)(1.0345))(0.38247(1.0372)(0.63234(1.829)(1.3784))))(0.37754(1.0112)(1.0312)))(0.34499(1.1517)(0.41358(0.97188)(1.0918))))(1.2225)))(1.1877))(0.40701(1.1633)(0.98063)))(0.36887(0.36916(0.37388(0.38023(0.40956(0.413(0.45214(0.74889(1.6417)(1.2782)(0.87899(1.3806)(1.4851)))(1.02))(0.92395))(1.1033))(1.265))(0.95027))(0.47931(1.5113)(1.8233)))(1.4053)))(0.34104(0.3412(0.3475(1.2423)(0.3644(0.3648(0.44261(1.164)(0.9724))(0.37309(0.37348(0.37545(0.37921(0.38253(0.41313(0.41677(0.41683(0.41886(0.42325(0.42431(0.44(0.44982(0.45275(0.48631(0.50041(1.0048)(0.50806(0.51482(0.54683(0.57258(0.57937(0.65629(0.68003(1.4538)(0.79411(1.3505)(0.85086(1.405)(0.87574(1.4409)(1.4505)))))(1.2868))(1.1682))(1.949))(1.2614))(1.1759))(1.0683)))(1.1817))(1.0291))(0.45871(0.53047(0.53139(1.8586)(0.53828(1.102)(1.6482)))(1.0517))(0.54705(1.0548)(1.2134))))(1.0278))(1.1318))(0.96843))(0.93949))(0.52822(1.1796)(0.57338(1.0908)(1.1298))))(1.1317))(1.1664))(0.40791(0.41096(1.1188)(0.45331(0.53234(0.56095(1.2985)(0.62042(1.1646)(1.1566)))(1.1641))(0.45387(0.59176(1.2644)(1.4392))(1.4053))))(1.106)))(0.99463))(1.0775))(0.91774))(1.1576)))(1.0374)))(1.5609))(0.84269)))(0.91216))(0.41137(0.93983)(0.96584)))(0.84664))(0.3395(0.34259(0.35203(0.39371(0.40663(0.40884(0.41197(1.0619)(0.44592(0.96935)(0.454(0.45765(0.45846(0.484(0.4879(0.49662(0.52704(0.52717(1.1758)(0.52852(0.54316(0.55569(0.57876(1.326)(1.1572)(2.1106))(1.6794))(1.0975))(1.2372)))(0.56478(1.2121)(1.2906)))(1.1393))(0.52435(0.54293(1.1481)(1.1279))(1.0371)))(0.51988(0.55933(0.63627(0.67461(1.4566)(1.324))(1.3184))(1.2114))(1.1111)))(1.0734))(1.0426))(1.4167))))(0.51419(1.0191)(0.59114(1.8474)(1.1695))))(0.4745(0.99678)(1.0709)))(1.2288))(0.39744(0.47053(0.98491)(1.006))(1.0524)))(1.075))(1.0601)))(0.36768(0.97632)(0.93098)))(1.1072))(0.33494(0.46907(0.47978(0.57278(0.62203(1.3711)(0.64533(0.73218(0.78516(0.79327(0.87708(0.89792(0.9118(1.5933)(0.97482(1.5452)(1.671)))(1.5353))(1.3788))(1.7469))(0.87336(1.6245)(1.5952)))(1.388))(0.64616(1.4645)(1.3001))))(1.1275))(1.228))(1.517))(0.97571)))(1.2565))(0.90511))(0.95294))(0.86353))(0.82906))(1.2446))(0.9681))(0.34953(0.35889(0.36242(0.38546(0.42343(0.43296(0.43846(0.44226(0.44807(0.45473(0.47551(0.48706(0.99048)(0.53266(1.3772)(1.0483)))(1.0719))(0.48481(0.53593(0.53902(0.58301(1.3725)(0.72222(1.2684)(1.4994)))(1.1671))(0.64502(1.1863)(1.2128)))(1.294)))(1.1504))(1.6046))(0.44058(0.48413(1.2975)(0.49646(0.54586(0.56184(1.5014)(0.57132(1.2341)(1.305)))(1.1836))(1.2632)))(0.95932)))(1.2191))(1.1235))(1.0107))(0.38491(1.7871)(0.39274(0.9533)(0.92639))))(0.91305))(0.8595)))(0.39182(0.45339(1.3832)(0.98823))(1.2289)))(1.258))(1.2865))(0.4413(1.1887)(0.94583)))(0.86283))(1.0347))(0.33553(0.87688)(0.91778)))(1.1295))(1.473))(0.82572))(1.228))(0.83498))(0.88102))(1.0504))(0.31766(0.40428(0.7269(1.6326)(2.2532))(1.3709))(1.2901)))(0.3409(0.93236)(0.8583)))(1.2753))(0.81538))(0.85811))(0.9956))(0.95488))(0.81972))(1.0854))(0.95677))(0.34612(0.92762)(0.88574)))(0.88249))(0.90442))(0.28527(0.8738)(0.9912)))(0.88711))(0.3928(1.1344)(0.40947(0.93007)(1.4502))))(0.42121(1.2762)(0.99515)))(1.0444))(0.89723))(1.0585))(1.1988))(0.83694))(0.9461))(0.77683))(0.76045))(1.0387))(0.77635))(0.76245))(0.85308))(0.90344))(0.30414(0.82942)(0.93204)))(0.79372))(0.78469))(0.24882(0.26449(0.26886(0.92333)(0.27793(0.28993(0.29657(0.82948)(0.86156))(0.89615))(0.35442(0.36394(0.44573(0.96131)(1.1874))(0.36829(0.37372(0.47352(0.49425(0.54337(0.58662(0.60537(1.1186)(1.4421))(1.4354))(1.2143))(1.312))(1.1008))(0.3938(0.40056(1.0452)(1.1093))(1.1781)))(0.97017)(1.0994)))(0.94527))))(0.77781))(1.2498))(1.4027))(0.75741))(0.84874))(1.0193))(0.88331))(0.96542))(0.78551))(0.22705(0.23782(0.23987(0.25141(0.25723(0.26157(0.26278(0.26698(0.26971(0.27823(0.27933(0.2802(0.2811(0.28243(0.29434(0.29821(0.30127(0.30473(0.30708(0.31555(0.32095(0.32253(0.32514(0.33445(0.33798(0.35343(0.39286(0.46079(1.0608)(0.46096(1.0039)(1.0193)))(1.1011))(0.9417))(0.90758))(0.34161(0.34575(0.35042(0.35137(0.35409(0.35588(0.3564(0.36295(0.36312(1.1695)(0.37254(0.40796(0.45435(1.1596)(0.48306(0.5429(0.54656(1.2352)(0.5561(1.0597)(1.2727)))(1.1461))(1.063)))(1.1296))(0.39261(0.40519(0.414(0.42901(0.43237(0.4377(0.45243(0.45583(0.46991(0.48479(0.49573(0.55739(1.4162)(0.59175(1.0929)(1.1537)))(0.50352(0.50945(0.52593(0.55839(1.5426)(1.2608))(0.56134(2.1845)(1.1972)))(2.0049))(0.55455(1.1344)(1.0946))))(0.49979(1.2392)(1.0405)))(1.0154))(0.45781(0.47175(0.48033(0.48833(1.5927)(0.49137(0.50245(0.52594(0.5401(0.57424(0.61847(0.66245(1.3745)(1.3579))(1.182))(1.1804))(0.584(1.2903)(0.6537(0.72495(1.3292)(1.3625))(1.225))))(1.1887))(1.0472))(1.0421)))(1.535))(0.98233))(0.96443)))(0.49711(1.0336)(1.1199)))(1.1217))(0.97991))(1.0211))(0.9825))(1.1926))(0.92191))))(0.89723))(0.92611))(1.0236))(1.1767))(0.47012(1.0899)(1.4021)))(0.85069))(0.95275))(0.42186(1.0645)(0.99592))))(0.89946))(0.51225(1.106)(1.442)))(0.82277))(0.31654(1.0269)(0.38272(0.88544)(0.95008))))(1.1853))(0.88317))(0.92908))(1.0656))(0.92556))(0.92103))(0.36484(0.89949)(0.37712(1.0368)(0.91545))))(0.8214))(0.82013)(1.4779))(0.32957(1.0445)(0.88273)))(0.2931(0.364(0.97082)(0.89544))(0.29495(0.418(1.0839)(0.4233(0.95361)(0.99758)))(1.1687))))(0.28902(0.46964(1.6015)(1.1927))(0.81266)))(0.32315(0.91273)(1.1066)))(0.27164(0.30663(0.5625(1.0706)(1.2634))(0.97264))(1.1315)))(0.81616))(0.8889))(1.0653))(0.2478(0.8437)(0.33048(0.43675(1.0482)(1.2239))(0.9523))))(0.74552)))(0.73409)))(0.21179(0.21249(0.22262(0.22924(0.24441(0.25956(0.29025(0.2951(0.30294(0.30485(0.30788(0.3129(0.3133(0.3135(0.31862(0.31903(0.32264(1.0867)(0.3259(0.32677(0.33065(0.33496(0.34572(0.35796(0.37973(0.38284(1.3849)(0.41588(0.46546(1.0923)(0.49391(0.50113(0.56439(0.60257(1.1185)(0.66431(0.69497(1.235)(1.326))(1.2013)))(1.1743))(1.1175))(1.2019)))(0.41933(0.45924(1.006)(1.1008))(1.0551))))(1.1241))(1.3447))(0.39465(0.47925(0.53989(0.68677(0.74013(1.299)(1.2692))(1.1977))(1.1392))(1.1521))(1.4591)))(0.88051))(0.94555))(1.087))(1.0562)))(0.82305))(1.0892))(0.92134))(0.93652))(0.87467))(0.83875))(0.90563))(0.31723(1.1304)(0.83546)))(0.96127))(0.80923))(1.6255))(0.75504))(0.98187))(0.3403(0.36547(0.98352)(0.54181(1.4636)(0.7805(1.6779)(1.5896))))(1.1678)))(0.21686(0.2358(0.25571(1.075)(0.97273))(1.1824))(0.75931)))(0.72911)))(0.88215))(0.9874))(0.87008))(0.74871))(0.24513(1.0215)(0.78974)))(0.75444))(0.75536))(0.90163))(0.70386))(0.79569))(0.20358(1.1284)(0.96002)))(0.73803))(0.80653))(0.7976))(0.94846))(0.75176))(0.91787))(1.2838))(0.95097))(0.71529))(0.83899))(0.82033))(0.88178))(0.75037))(0.25548(0.98737)(0.8642)))(0.71835))(0.72106))(1.0814))(0.55907)))(0.84694))(0.70244))(1.0755))(0.82786))(1.1015))(0.54496))(0.67952))(0.92597))(1.0042))(0.70286))(0.76656))(1.0329))(0.16927(0.72103)(0.7056)))(0.67624))(0.68367))(0.68484))(0.68726))(0.78273))(0.24264(0.82065)(0.75995)))(0.65401))(1.0117))(0.88883))(0.67233))(0.60356))(0.64752))(0.71829))(0.9455))(0.97793))(0.16116(0.1945(0.22879(0.23837(0.80573)(1.2699))(0.7939))(0.19481(0.25196(1.0303)(0.27039(0.2756(0.3007(0.85106)(0.34953(0.40046(1.02)(0.43169(0.46916(1.5478)(1.1111))(0.94509)))(0.94825)))(0.3543(0.42347(0.48515(1.021)(1.1639))(0.99711))(0.87552)))(0.78133)))(0.73163)))(0.66349)))(0.71339))(0.93872))(0.63696))(0.71153))(0.62736))(0.1324(0.64424)(0.68458)))(0.67074))(0.79422))(0.62862))(0.66515))(0.77578))(0.12407(0.71562)(0.82665)))(1.467))(0.64703))(0.71713))(0.74792))(0.18817(0.93869)(0.23683(0.76161)(0.75107))))(0.2416(0.76766)(0.37054(0.87466)(1.2463))))(0.72647))(1.304))(0.13358(0.83997)(0.77413)))(0.10555(0.15122(1.1752)(0.72233))(0.68066)))(0.67498))(0.5697))(0.091966(0.12229(0.13611(0.17251(0.75911)(0.20264(0.82912)(0.27978(1.003)(0.80844))))(0.16388(0.22627(0.22795(0.89832)(0.23195(0.82874)(1.3776)))(0.82702))(0.67783)))(1.2643))(0.09313(0.67628)(0.82657))))(0.74949))(0.69124))(0.68913))(0.90907))(0.10624(0.63135)(0.78755)))(0.66904))(0.62672))(0.67558))(0.34939(0.93448)(0.87708)))(0.69352))(0.86924))(0.60631))(0.66745))(0.56238))(0.59319))(0.64835))(0.61867))(0.58399))(0.58097))(0.14665(0.96245)(0.73641)))(0.07643(0.082235(0.83793)(0.23599(0.98964)(0.79505)))(0.5983)))(0.66857))(0.61177))(0.68314))(1.1661))(0.6764))(0.68197))(0.56648))(0.60695))(0.76371))(0.14766(0.7879)(1.343)))(0.61121))(0.67893))(0.078603(0.70491)(1.0302)))(0.75978))(0.66343))(0.54049))(0.72574))(1.3742))(0.57155))(0.60123))(0.62867))(0.78367))(0.75109))(0.78817))(0.58158))(0.54196))(0.93844))(0.53187))(1.2126))(0.67252))(0.47438))(0.47324))(0.13232(0.72198)(0.94124)))(1.0038))(0.43649))(2.0131))(0.568))(0.46112))"
    )
    val tree2 = parseTree(
        "(-0.27698(-0.18355(-0.15953(-0.12865(-0.074792(-0.074669(-0.03825(-0.036008(-0.012322(2.0599e-42(3.1557e-41(3.3991e-41(3.4522e-41(6.21e-41(0.00072921(0.0015794(0.010683(0.021277(0.0218(0.024749(0.028221(0.035133(0.051493(0.058568(0.060534(0.061114(0.062936(0.073202(0.076792(0.080317(0.081708(0.082594(0.085047(0.085785(0.088579(0.089003(0.089658(0.091273(0.094157(0.097099(0.098731(0.10474(0.10805(0.10867(0.10917(0.10988(0.11088(0.11179(0.11345(0.11375(0.11386(0.11548(0.11762(0.11828(0.11946(0.12212(0.12277(0.1231(0.12432(0.12593(0.12776(0.131(0.1316(0.13208(0.13353(0.13466(0.13611(0.13872(0.13885(0.14183(0.14572(0.14637(0.14874(0.14955(0.15077(0.15223(0.15372(0.15494(0.15646(0.15779(0.16067(0.16073(0.16117(0.16184(0.16336(0.1634(0.16521(0.16891(0.17086(0.17104(0.17148(0.173(0.17512(0.17673(0.17677(0.17741(0.17911(0.17963(0.17985(0.18014(0.18052(0.18062(0.1819(0.18232(0.18309(0.18339(0.18455(0.18603(0.18674(0.18769(0.18797(0.18809(0.18901(0.19078(0.19137(0.19146(0.19292(0.21265(0.21314(0.22214(0.22511(0.23224(0.23957(0.24115(0.29431(0.30029(1.1348)(0.97413))(0.35158(0.37429(0.98731)(0.42952(0.48511(0.5374(0.55997(0.65195(1.2851)(1.4841))(0.56139(1.1327)(1.1047)))(1.1358))(1.1102))(0.62928(1.2713)(1.1562))))(0.87586)))(0.24971(0.3964(0.97542)(0.40713(1.3064)(1.0141)))(1.2446)))(1.0416))(0.75027))(0.87756))(0.80701))(0.72974))(0.82634))(0.19354(0.19407(0.19467(0.19677(0.19724(0.19875(0.20008(0.20023(0.20081(0.20093(0.20211(0.20233(0.20486(0.20512(0.20636(0.20672(0.20756(0.20948(0.20962(0.21097(0.21151(0.21283(0.21311(0.21623(0.21676(0.21744(0.21849(0.21864(0.22071(0.22113(0.22338(0.22864(0.2296(0.22977(0.25782(0.26767(0.27345(0.27672(0.28516(0.34234(0.3433(0.34387(0.42345(1.0333)(0.51343(1.1202)(0.54666(0.55857(1.0911)(0.56594(0.58671(2.2082)(1.2514))(1.1026)))(1.703))))(1.0547))(0.34331(0.37496(0.41935(0.44457(0.44793(1.0469)(0.45665(0.46224(0.53699(0.63673(1.3056)(1.1459))(0.53959(0.55817(0.57663(0.58594(0.62864(0.68789(0.74029(0.78543(1.7271)(1.3046))(1.5227))(1.2139))(1.2912))(1.1144))(0.62797(0.6318(1.1685)(0.66375(1.2466)(1.2838)))(1.6094)))(0.5859(1.1813)(1.2336)))(1.1807)))(1.3148))(1.1556)))(1.0811))(1.5591)(0.43717(1.1424)(0.94705)))(0.99207))(0.37869(0.3958(0.39676(0.42696(0.42932(0.43169(0.46401(0.4668(0.55659(0.58451(1.2832)(1.2654))(1.1397))(0.55796(1.1943)(1.4672)))(1.0052))(0.43917(0.44501(1.1683)(0.48213(1.417)(0.66953(1.9095)(1.4226))))(1.2927)))(0.51929(1.4915)(1.0885)))(1.3336))(1.0982))(1.0502))(0.3826(0.38662(1.2663)(1.1196))(0.38965(0.96569)(0.42283(1.1406)(1.0163)))))))(0.34389(0.36241(0.90132)(0.94682))(0.34989(0.93995)(0.41964(0.43059(1.4267)(1.4031))(0.45294(1.1663)(1.1627))))))(0.80138))(0.28221(0.31732(1.3259)(0.3992(0.95798)(0.5863(0.64378(0.67762(0.82612(1.5313)(1.5385))(1.4343))(1.2418))(1.0931))))(0.30724(0.87129)(0.93771))))(1.3813))(0.87228))(0.29644(1.1364)(0.96082)))(0.23068(0.23398(0.23417(0.23572(0.23594(0.23749(0.23788(0.24077(0.24104(0.24122(0.24611(0.24644(0.24731(0.25091(0.26073(0.26119(0.27465(0.29054(0.33005(0.34095(0.34509(0.3458(0.35165(0.40881(0.41696(0.42224(0.42424(0.43201(0.51759(0.52387(1.0447)(0.54203(1.0659)(1.3068)(0.55727(1.1379)(0.63701(0.6397(0.73383(0.74368(1.5196)(1.5076)(0.74638(0.76512(1.4733)(1.3469))(0.77657(1.2805)(0.7844(0.8266(1.4854)(0.82861(1.4217)(0.84177(1.6336)(1.6899))))(1.5342)))))(1.2776))(1.238))(1.183)))))(1.2229))(0.9833))(0.95218))(1.557))(1.5067))(0.43879(1.268)(1.5319)))(1.1593))(0.95865))(0.43847(0.97273)(1.4031))(0.95934))(0.95099))(0.96972))(0.30363(0.32694(0.39526(0.40248(0.40768(0.97492)(0.41008(0.42319(0.49067(1.0983)(1.0392))(0.42567(0.45464(1.177)(0.46925(0.60834(1.1448)(1.2875))(1.0387)))(0.96544)))(0.92041)))(0.90593))(1.4491))(0.88791))(1.0115)))(1.3236))(0.98421))(0.97272))(0.925))(0.25026(0.25254(0.25257(0.25361(0.2586(0.25924(0.25983(0.26093(0.26361(0.2647(0.26555(0.26588(0.2666(0.26672(0.26804(0.26915(0.26978(0.26987(0.27251(0.27625(0.27795(0.27902(0.28091(0.28139(0.28266(0.28394(0.28479(0.28951(0.29331(0.29438(0.29478(0.29513(0.29598(0.29752(0.29858(0.30036(0.30063(0.30127(0.30152(0.30383(0.30484(0.30523(0.30556(0.30782(0.30848(0.30889(0.30951(0.31331(0.3158(0.31682(0.3196(0.32213(0.32234(0.32259(0.32627(0.32656(0.33149(0.33197(0.33646(0.33695(0.33857(0.34608(0.34611(0.34795(0.35204(0.35211(0.3568(0.35801(0.36068(0.3646(0.36493(0.3659(0.37017(0.3703(0.37064(0.37362(0.38356(0.38468(0.38727(0.39313(0.39896(0.42487(0.43781(0.4393(0.53645(0.5684(0.59493(0.60811(0.62728(0.6486(0.65077(0.75793(1.8064)(1.0223(1.2599(2.7559)(1.7714))(1.0797(1.2225(2.3592)(1.8753))(1.9336))))(1.2848))(0.65971(0.69543(0.69956(0.7132(0.77869(0.85043(0.85704(1.1336(1.3242(1.4425(2.6221)(1.4455(1.8737(2.5296)(2.4852)(3.6161))(1.4494(1.5081(1.5832(2.8007)(1.8874(2.4304)(1.9541(2.617)(2.4917))))(1.5452(2.1403(2.6469)(3.3706))(1.6226(2.6433)(2.4531))))(2.7755))))(2.3515)(2.3042))(1.9346))(0.87615(0.93788(0.98673(1.05(1.7322)(1.1046(1.6209(2.274)(3.0826))(1.333(1.8715(2.2702(3.1502)(2.8395))(2.6756))(2.2513))))(1.4911))(1.5657)(1.5369))(1.034(1.5528)(1.5942))))(1.5908))(0.82125(0.83395(0.85722(0.85816(0.93456(0.97049(0.99784(1.0619(1.1753(1.2979(1.3098(1.359(1.4034(1.9822(2.1984(3.6593)(2.3182(3.0718)(2.662(5.4803)(4.437))))(2.1071(3.0282)(2.9825)))(1.4652(2.3133)(2.4436)))(1.8227(2.4817)(2.7058)))(2.6838))(1.3292(1.4406(1.4407(1.4766(1.5567(1.6836(1.7503(1.7655(1.9193(1.932(1.9792(2.0733(2.0899(2.3532(3.7674)(3.1863))(2.1195(2.7169)(3.0342(3.5709)(3.5424))))(2.9361))(2.7127))(2.0612(3.1856)(2.7175)))(3.6953))(4.2119))(2.2651))(2.5897))(2.1722))(1.9993))(1.5088(1.6994(2.2148)(2.9518))(2.5074)))(2.0818)(2.9951))(1.4873(1.8404(1.9676(3.2271(3.8934)(5.3434))(2.5227))(3.0743))(1.4946(1.5373(1.6306(1.8094(2.4697)(2.2171(3.1303)(4.9546)))(3.1033))(2.3363))(1.762(2.3416)(2.5459))))))(1.1972(1.8837)(1.2555(1.7891(2.0063(3.2591(3.9404)(4.0602))(2.9249))(3.9136(4.7452)(5.1361)))(1.9475))))(1.7669))(1.6458))(0.99118(1.7456)(1.5087)))(1.9285)(1.9778))(1.5143(1.7214(5.8418)(2.8631))(4.4592)))(1.0854(1.1863(2.0146)(1.7355))(1.5504(2.1613)(2.0583))))(1.3423))(1.6839)))(1.2695))(1.3919))(1.2866))(0.9181(0.9221(1.1639(2.0254)(1.8991))(1.7468))(1.5253))))(1.2303))(1.1819))(1.2026))(1.0015(1.8254)(2.5655)))(1.084))(0.44305(0.44368(0.46156(0.47324(0.48251(0.49308(0.50634(0.51466(0.52763(0.52803(0.54217(0.55045(0.56045(0.56677(0.60822(1.2415)(0.68609(1.4501)(0.69411(0.69565(0.73225(0.81243(1.7953)(1.4772))(1.4415))(1.2881))(1.6667))))(1.1375))(1.3662))(0.57675(0.58521(0.60244(1.1734)(1.2718))(1.9784))(1.1694)))(1.3605))(1.2293))(1.1751))(1.0366))(1.1298))(1.0504))(1.0132))(1.1589))(1.5829))(1.3278))(1.0297)))(0.43919(0.46022(0.46538(1.0705)(0.47233(0.48497(0.49943(0.5343(0.63339(0.64548(0.65896(1.2486)(1.4563))(1.3838))(1.2249))(0.56506(1.1138)(0.6178(1.4156)(1.5217))))(1.0339))(0.60717(1.3577)(1.1771)))(1.2868)))(1.0895))(0.49773(0.51087(1.4399)(0.51524(0.52433(1.0267)(1.1635))(1.6633)))(2.0303))))(0.98981))(0.42494(1.0541)(0.96989)))(1.7932))(0.98044))(1.0615))(1.1013))(0.38921(1.2548)(1.0199)))(0.87241))(0.37368(0.37914(0.42361(1.0208)(1.0292))(1.1874))(1.1004)))(1.1919))(0.39074(0.39798(0.41625(0.93623)(1.138))(0.43443(1.0941)(0.4592(0.47886(0.55393(0.6382(0.63924(1.2753)(1.1967))(1.8796))(1.0729))(0.48411(1.243)(0.51146(1.4103)(0.5185(1.2453)(1.1971)))))(1.1214))))(0.97928)))(0.95029))(0.90769))(1.283))(0.42285(0.97199)(0.97927)))(0.35793(0.41956(0.94272)(0.94531))(0.37258(0.37965(0.9079)(0.46268(1.2411)(1.0101)))(1.1846))))(0.35958(0.39914(0.40177(1.0906)(0.41314(0.47911(1.1712)(0.53458(1.1997)(1.1602)))(1.3872)))(1.0627))(0.88204)))(1.1446))(1.0862))(0.40212(1.0922)(1.1442)))(1.0814))(0.88124))(1.1791))(0.84636))(0.34149(0.34401(0.34745(0.34953(0.34974(0.35522(0.3579(0.37762(0.38243(0.46696(1.5103)(0.98489))(0.38497(0.40869(0.41036(0.42427(0.42927(0.4337(0.43611(0.54536(0.55504(0.56212(0.58161(0.62326(1.4774)(0.65073(0.66446(0.67318(1.2192)(0.69217(3.6036)(1.4577)))(1.4971))(1.5499))(1.581))(1.5321))(1.1706))(1.4819))(1.656))(0.45232(0.46893(1.0323)(1.3519))(2.1194)))(1.2982)(1.7125))(0.95788))(0.45536(0.55451(0.56826(0.58653(0.6326(1.1766)(1.3879))(1.3175))(1.0872))(1.3928))(0.48997(1.017)(1.2414))))(1.0889))(1.561))(0.93056)))(0.93922))(0.36156(0.40356(0.51644(1.0174)(1.1276))(1.0171))(0.95406)))(0.94328))(0.38147(1.2653)(0.89009)))(0.96505))(0.41669(1.1659)(1.3477)))(0.88342))(0.85633)))(0.8388))(1.0997))(0.95178))(0.32902(0.35698(0.37049(0.39246(0.39421(0.42327(0.42646(0.51525(0.51699(0.51901(0.56358(1.1055)(0.60837(1.1132)(1.3122)))(2.2533))(0.5193(0.52752(0.55313(1.0778)(0.56427(0.59761(0.61255(1.2271)(2.5631))(1.4526))(0.61053(1.199)(1.4201))))(2.3519))(1.1145)))(1.1515)(1.2037))(1.058))(1.6618))(1.1173))(1.3274))(1.0609))(1.1303))(0.84072)))(0.89009))(1.2203))(0.96503))(0.82609))(0.32113(0.32308(0.32376(0.32843(0.33126(0.33631(0.35008(0.36467(0.36889(0.37374(0.43926(0.43962(0.46252(0.50589(0.51491(0.57221(0.58417(0.67301(1.3188)(0.70633(0.82947(0.95178(1.5286)(2.0398))(1.5075))(1.4741)))(0.60156(1.2384)(0.63025(0.63485(1.7142)(0.64566(2.186)(1.4464)))(1.4698))))(1.2649))(1.2436))(1.2888))(1.3471))(0.45057(0.49841(0.51011(0.51336(1.1722)(0.51741(0.52454(0.541(0.5426(0.5596(0.56013(1.1084)(0.56381(0.5676(1.4772)(0.61469(0.64927(0.65307(1.2139)(1.1625))(1.3103))(1.2996)))(0.6329(1.3681)(1.2967))))(1.1048))(0.62598(1.2486)(1.3883)))(1.0752))(1.1587))(1.2178)))(0.57666(1.2654)(1.7203)))(1.8403))(1.1142)))(1.344))(0.92333))(0.92879))(0.90883))(0.9348))(0.85839))(1.3213))(0.92017))(0.8251))(0.35718(1.058)(0.91818)))(0.38971(0.55819(1.0627)(1.2614))(0.89937))))(0.3934(1.5791)(1.256)))(0.87887))(0.93546))(0.32186(1.5807)(1.0335)))(0.3083(0.33893(0.94185)(0.36873(1.0196)(0.91523)))(0.37801(1.0482)(1.064))))(0.91476))(0.35192(0.92086)(1.5565)))(0.97099))(0.96934))(0.93585))(0.31996(0.32006(0.32777(0.35234(0.37919(0.3976(0.40209(0.40913(0.411(0.41526(0.41708(0.43431(0.4496(0.47678(0.49731(0.50803(0.50879(1.0989)(0.52544(1.0436)(0.60787(0.7947(1.9129)(1.6826))(1.3017))))(0.53631(1.0812)(1.5618)))(1.1707))(1.3346))(0.95119))(0.52639(1.0723)(1.5532)))(0.42392(0.45001(0.45002(0.46098(0.48489(0.48798(0.52591(1.0829)(0.56174(0.71878(0.72208(1.273)(0.74912(0.95738(1.5533)(1.5954))(0.85718(1.6129)(1.4319))))(1.2776))(1.4032)))(0.67811(1.2204)(1.4662)))(1.0061))(0.4761(0.4905(0.49195(0.4971(0.49949(0.5216(0.53495(0.74944(1.5358)(1.9046))(0.53557(0.58383(0.64847(0.72428(2.2635)(1.3172))(0.66079(1.2909)(1.4054)))(1.1425))(0.53683(1.4586)(1.0481))))(0.56351(1.1043)(1.1689)))(1.0544))(1.01))(0.53621(0.56517(1.5167)(1.3732))(0.77655(1.429)(1.7778))))(1.2583))(1.4559)))(1.0526))(1.4938))(0.99608)))(1.8423))(0.98359))(0.93371))(1.0188))(0.90842)(1.0926))(0.91021))(1.8668))(0.84819))(1.6897))(0.8918)))(0.36512(0.94501)(1.0428)))(0.86485))(0.8552))(0.79828))(0.91988))(0.34463(0.35046(0.41778(0.9231)(1.5604))(0.95721))(0.34884(0.35336(0.35381(0.36062(0.42326(1.4182)(0.46298(1.7796)(1.3123)))(0.36086(0.50514(0.52842(0.76144(0.79424(1.564)(1.4528))(1.3429))(1.1677))(1.1443))(0.45719(0.96563)(1.0534))))(1.449))(0.99452))(0.97488))))(1.0219))(0.79575))(0.3339(0.35148(0.99984)(1.1448))(0.9072)))(1.1846))(1.2857))(0.7946))(0.91718))(0.82614))(0.32257(1.222)(1.4329)))(0.8097))(0.99854))(0.9557))(0.86065))(0.27057(0.27404(0.27734(0.27771(0.28706(0.29931(0.30278(0.30613(0.31905(0.32206(0.34494(0.40324(0.43571(0.46602(1.0383)(1.0052))(0.48344(1.1405)(1.0454)))(1.1387))(0.91735))(0.32404(0.33631(0.34011(0.34644(0.46731(0.48968(0.49904(0.54356(0.57172(1.1121)(1.1016))(0.66744(1.7791)(1.2872)))(1.069))(1.4658))(1.006))(0.34653(0.3899(0.46744(0.50488(1.2195)(1.2774))(1.1237))(1.3121))(1.0719)(1.3705)))(1.0693))(0.34197(0.34878(0.35278(0.36218(0.36299(0.37505(0.37595(0.38456(0.39911(0.41817(1.1023)(1.0189))(0.4141(0.4395(1.0409)(1.0574))(0.41892(0.93929)(0.97676))))(0.39241(0.41929(0.96382)(0.53198(0.60996(1.2015)(1.1245))(1.2585)))(0.39689(0.41678(1.0078)(1.0404))(1.0565))))(1.0946))(1.0128))(1.3492))(0.41986(1.2156)(0.98654)))(0.87921))(0.90178))(0.99265)))(0.94261)))(0.84049))(0.39118(0.94938)(0.89704)))(0.8225))(1.0669))(1.0153))(1.002))(1.0782))(0.27902(1.4065)(0.29919(0.31101(0.31109(1.0501)(0.3155(0.32255(1.4303)(0.36609(0.3723(0.37371(0.39337(0.40114(0.40236(0.40245(0.44306(0.50721(1.1859)(1.6328))(0.45845(0.47595(0.50864(1.2648)(1.0576))(1.6933))(1.0366)))(0.44747(0.48912(1.035)(0.49892(1.4076)(1.311)))(0.54266(1.1122)(1.1485))))(0.44202(0.98022)(0.48067(0.51656(0.60278(1.1866)(1.3237))(0.82145(1.8033)(2.2456)))(1.0282))))(1.0589))(0.96781))(0.98977))(1.1528))(2.0708)))(0.38128(0.3857(0.40092(1.015)(1.1265))(1.0633))(1.0838))))(1.3012))(1.3824))))(0.90613)))(0.78428))(0.90101))(0.82926))(0.93351))(1.1517))(0.28262(0.79704)(0.82509)))(0.30451(1.0923)(1.253)))(1.3832))(0.26892(0.3154(0.32293(0.96819)(0.87553))(0.86072))(1.0923)))(0.82011))(0.37268(0.9823)(0.52802(0.55194(0.58092(0.58481(0.59819(1.226)(0.60884(0.61125(1.1463)(1.6756))(1.9987)))(0.62542(2.3696)(1.3619)))(0.64179(0.67183(0.70249(1.5008)(1.4748))(0.67467(1.5604)(1.2415)))(0.73165(0.73502(1.357)(1.2886))(1.4424))))(1.3794))(2.0676))))(0.85954))(0.99288))(0.7862))(0.92457))(0.31748(0.32786(0.86045)(0.33993(0.41775(0.97424)(1.2266))(0.98612)))(0.81929)))(0.94425)))(0.7511))(1.2722))(1.0896))(0.74568))(1.1775))(0.74265))(1.0885))(0.91045))(0.75869))(0.76516))(1.0483))(0.77201)))(0.76535))(0.74586))(0.95422))(0.72909))(0.99076))(0.88515))(0.75783))(0.88122))(0.80957))(0.90855))(0.24(0.247(0.26871(0.29112(0.30569(0.83165)(0.32661(0.35824(0.37026(0.38798(0.41486(1.1069)(0.43419(1.0761)(0.47672(0.54329(1.0851)(0.58927(0.60901(1.2603)(0.61479(1.1328)(1.1207)))(1.769)))(1.0362))))(0.43855(0.98619)(0.94046)))(1.0571))(1.1467))(0.89393)))(1.0672))(0.36731(0.91687)(0.95088)))(1.1009))(1.3922)))(0.8804))(0.28368(0.91312)(0.98081)))(0.7712))(0.27086(0.84984)(0.95671)))(0.26792(1.1822)(1.2706)))(1.0217))(1.0803))(0.72602))(0.23317(0.79292)(0.9548)))(0.7766))(0.7151))(0.89074))(0.20335(0.76688)(0.82609)))(0.8312))(1.0825))(1.1504))(0.71921))(0.74871))(0.89474))(0.8304))(1.0889))(0.24061(0.9776)(0.81205))))(0.78205))(1.0896))(0.71081))(0.88704))(0.6907))(0.93485))(1.4012))(0.20188(1.0823)(0.39661(1.3629)(0.93346))))(0.78816))(0.80056))(1.1766))(1.0893))(0.79073))(0.7041)(0.72603))(0.18752(0.19536(0.20875(0.21493(0.24177(0.28374(1.1311)(0.30615(0.33543(0.52707(1.0685)(1.2094))(1.0109))(0.81538)))(0.26652(0.28112(0.28508(0.29677(0.37901(0.93388)(0.39576(0.41652(0.43527(0.44756(0.47392(0.48825(1.029)(0.5419(1.1794)(0.67156(1.7003)(1.3092))))(1.2273))(1.1358))(0.56228(1.1768)(1.0636)))(1.5887))(1.3853)))(0.80541))(0.90609))(0.91949))(0.43955(1.5869)(0.95219))))(1.1353))(0.21064(0.28812(0.34738(0.51231(0.57684(0.65002(0.75252(0.80112(1.4799)(1.3541))(1.6306))(0.66141(1.6183)(1.2089)))(1.2956))(1.1008))(1.071))(0.41809(0.44048(1.376)(0.4642(1.1935)(1.8183)))(1.007)))(0.23675(0.98205)(1.093))))(0.73857))(0.84781)))(0.19214(0.24059(1.3094)(0.27595(0.84034)(1.0013)))(0.96409)))(0.70241))(1.1014))(0.9866))(0.78281))(0.77995))(0.85886))(0.29161(0.93105)(0.88034)))(1.0192))(0.71513))(0.75155))(0.2176(0.72621)(0.29213(0.81151)(1.1391)))(0.83146))(0.72811))(0.90359))(0.77891))(0.70176))(0.38264(0.44804(1.2328)(1.33))(0.9644)))(0.70302))(0.70436))(0.18254(0.18819(0.22965(0.90834)(0.74225))(0.84398))(0.19129(0.22746(0.78321)(0.90704))(0.74407))))(0.69286))(1.0513))(0.90272))(0.82919))(1.0022))(0.66996))(0.86848))(0.72814))(0.77167))(1.0196))(0.7854))(0.75783))(0.86669))(0.70575))(0.68494))(0.64546))(0.14408(0.69909)(0.74768)))(0.21622(0.7792)(1.1081)))(0.7925))(0.78535))(0.64844))(1.2107))(0.89483))(0.65332))(0.16325(0.87147)(0.72654)))(0.6326))(0.8545))(0.65675))(0.66604))(0.66125))(0.65411))(0.66299))(0.65362))(0.67548))(0.6524))(0.68159))(0.81218))(1.384))(0.81183))(0.71738))(0.63315))(0.74863))(0.096411(0.60319)(0.65229)))(0.71213))(0.59609))(0.6178))(0.64951))(0.71384))(0.5913))(0.58342))(0.59218))(0.71891))(0.70168))(0.089587(0.20269(1.026)(0.71966))(0.70862)))(0.60138))(0.77431))(0.64284))(0.68513))(1.6324))(0.57873))(0.55045))(0.53195))(0.66234))(0.94995))(0.64132))(0.72529))(0.77351))(0.57733))(0.82021))(0.60778))(0.69738))(0.53611))(0.49054))(0.46961))(0.74447))(0.47572))(0.66975))(0.61364))(0.58012))(0.73808))(0.39794))"
    )

    return Visualization(tree1, tree2, pos) { tree1E, tree2E ->
        monotoneInterleaving(tree1E, tree2E)
    }

}

fun vulc_05_ts150am_vs_151am(pos: Vector2): Visualization {
    val tree1 = parseTree("(-0.1849(-0.14488(-0.13844(-0.13532(-0.084409(-0.055514(-0.052873(-0.028506(-0.026653(-0.015689(-0.013896(-0.01155(3.1347e-42(3.23e-42(3.244e-42(5.6893e-42(7.2125e-42(7.2531e-42(1.4401e-41(2.6314e-41(3.5816e-41(3.6822e-41(6.8584e-41(0.0029319(0.0064811(0.0088814(0.014683(0.016272(0.017924(0.018978(0.020555(0.025838(0.026316(0.027118(0.028677(0.035235(0.035527(0.042846(0.045261(0.046837(0.047553(0.054133(0.054733(0.056774(0.059066(0.059621(0.06129(0.06432(0.065924(0.068043(0.068149(0.072381(0.074499(0.076383(0.08549(0.086804(0.087982(0.088332(0.089725(0.09078(0.09305(0.09616(0.099006(0.10129(0.1039(0.10494(0.10645(0.10759(0.11067(0.11072(0.11293(0.11365(0.11457(0.11546(0.11694(0.11887(0.1192(0.12236(0.12246(0.1237(0.12485(0.12528(0.12787(0.12931(0.13(0.1376(0.13958(0.14083(0.14519(0.14974(0.1499(0.15156(0.15265(0.15479(0.16032(0.16292(0.1662(0.16776(0.16807(0.16857(0.17011(0.17204(0.17312(0.17319(0.17371(0.17427(0.17571(0.17643(0.17695(0.17761(0.17788(0.18193(0.18343(0.18663(0.23555(0.2574(0.27672(0.28092(0.28579(0.29422(0.30205(0.3128(0.33943(0.36463(0.39113(1.2104)(0.40478(0.41948(0.42086(1.0042)(0.47417(0.48915(0.52847(0.53859(0.72757(0.9258(1.5149)(1.4273))(0.73031(0.7454(1.4159)(0.75765(1.4157)(1.3143)))(1.3539)))(1.207))(0.57615(1.1231)(0.59285(1.1994)(0.63468(1.1561)(1.2528)))))(0.99066))(1.3463)))(0.9619))(1.0594)))(0.911))(1.2126))(0.81694))(0.82029))(0.82562))(0.80026))(0.98943)(0.85805))(0.92333))(0.8891))(0.77762))(0.78661))(0.69159))(0.73306))(0.17858(0.17892(0.17907(0.18121(0.18299(0.18391(0.18474(0.18628(0.18758(0.19034(0.19115(0.19123(0.19354(0.19396(0.19499(0.1969(0.197(0.19711(0.19991(0.20146(0.20343(0.20453(0.20472(0.20524(0.20639(0.20864(0.20939(0.20976(0.21107(0.21203(0.2151(0.21717(0.21896(0.23245(0.23621(0.24727(0.28557(0.35369(0.8657)(1.189))(1.0728))(0.24757(0.24804(0.26558(0.2668(0.27431(0.27711(0.28887(0.29175(0.38638(0.49518(1.4085)(1.4718))(1.0679))(0.30076(0.30528(0.31064(0.31335(0.32035(0.33191(0.35705(0.38162(0.3919(0.39348(0.39653(0.40247(1.0121)(0.42917(0.44567(0.45181(0.45866(0.46068(0.46117(0.46464(0.46996(1.9884)(1.0273))(1.0833))(1.5237))(0.46873(0.47533(0.50189(0.53081(0.59466(0.68291(0.69081(1.208)(1.3817))(0.6837(0.68456(0.69513(0.71624(1.9356)(1.2642))(0.75577(1.329)(2.1832)))(0.72335(1.4585)(1.8588)))(0.68444(1.3016)(1.7607))))(1.8927))(1.0667))(1.1571))(1.0859))(0.48364(0.59366(1.1694)(1.2064))(1.0998))))(0.49437(1.3066)(0.50567(1.519)(1.0753))))(1.0536))(1.1662))(1.132)))(0.60844(1.2032)(1.6765)))(0.96739))(1.0011))(0.48669(0.56358(0.58337(0.59735(0.64452(0.66861(1.3442)(0.7297(0.74622(1.349)(1.4343))(1.607)))(1.6072))(1.1058))(1.3818))(1.2096))(0.50802(1.2143)(0.53038(1.3818)(1.0558)))))(1.7061))(0.88539))(0.82603))(0.93423))(0.93421))(0.9728))(1.1222)))(0.78953))(1.0014))(0.35236(0.42306(1.2504)(1.0577))(1.2414)))(0.27412(0.27885(0.31111(0.31319(0.35274(0.3918(1.0285)(0.40358(0.4267(1.1751)(1.0046))(0.42186(0.45981(1.3968)(0.46546(1.2872)(1.0792)))(0.441(0.48046(1.0444)(1.2304))(1.3252)))))(1.1102))(1.3708))(0.88563))(1.0575))(0.29005(0.29721(0.31251(0.34546(1.0183)(0.89636))(0.3373(0.34418(0.35588(0.38858(0.3997(0.39992(1.0166)(0.42962(0.50768(0.52261(1.7175)(0.61602(1.3626)(0.62314(1.4121)(0.87508(1.5598)(1.4112)))))(1.0488))(1.2316)))(0.41553(0.45288(0.96202)(0.50816(1.1328)(1.5836)))(0.97273)))(0.39519(0.43605(2.1574)(1.4291))(1.0521)))(1.0751))(0.35095(0.35498(0.87056)(0.86929))(0.35921(0.36965(1.0036)(0.44188(0.48007(0.51978(1.0273)(1.1282))(1.0095))(0.55169(1.1001)(1.1761))))(0.90562))))(1.0196)))(0.98826))(1.0404))))(1.0161))(1.2317))(1.2765)))(0.83419))(0.29396(0.80673)(0.95991)))(0.24168(0.27497(0.29708(1.0343)(0.80015))(0.99662))(0.99233)))(0.83856))(0.74215))(0.21439(0.2145(0.21644(0.21783(0.21989(0.22225(0.22492(0.22649(0.22922(0.23111(0.23165(0.23276(0.23647(0.24136(0.24149(0.24328(0.24399(0.24489(0.24676(0.25124(0.25236(0.25239(0.25313(0.25869(0.25882(0.26237(0.27022(0.27059(0.27133(0.2728(0.27329(0.27426(0.27617(0.27885(0.27947(0.27987(0.28255(0.28262(0.28554(0.28673(0.28809(0.28903(0.29003(0.29101(0.29234(0.29619(0.29704(0.29772(0.29911(0.29965(0.30069(0.30075(0.30206(0.30557(0.30724(0.30908(0.30942(0.31152(0.31408(0.31476(0.31596(0.31652(0.31779(0.31817(0.31843(0.32073(0.32187(0.32193(0.32468(0.32616(0.33006(0.33273(0.33667(0.33723(0.34034(0.34044(0.34735(0.34906(0.34978(0.35109(0.35245(0.35579(0.37141(0.37206(0.37272(0.47976(0.53293(0.54702(0.56233(0.68925(0.73845(0.75822(0.99383(1.5521)(1.6115))(1.6172))(0.78882(0.87766(0.90888(0.90966(0.91708(1.0202(1.0203(1.0308(1.0633(1.149(1.2783(1.3305(1.3692(3.0525)(1.5068(1.7275(2.2415)(1.7706(3.0313)(2.3102)))(2.1015)))(1.6016(2.3808)(1.767(1.8314(2.6202)(3.5394))(2.0796(2.1613(2.2348(2.2762(2.7221(2.9838(3.7475(5.4041)(4.5241))(3.7963))(3.0299(5.3046)(3.5413(4.8258)(4.6014(5.2849)(6.4553)))))(3.322))(4.6495))(2.8747))(2.1918(3.3833)(3.0955))))))(1.7872))(1.2378(2.7121)(1.4702(1.5732(1.58(2.1485)(1.8368(4.0441)(4.9931)))(2.1676(2.8531)(2.1864(4.4632)(3.0053))))(2.5431))))(1.2128(1.5599(1.6748(2.3059)(1.7482(2.1792(3.1057)(6.0679))(3.4702)))(2.4629))(2.2537)))(1.7334))(1.0704(1.0799(2.5978)(1.4073(1.9415)(2.3772)))(2.8898)))(1.6388(3.2013)(1.7112(2.5266)(1.9346(2.9575)(2.7471)))))(1.431))(1.2913(1.5769(2.439(2.6935(2.7559(3.3537)(2.9171(3.6034)(6.2512)))(3.3313))(3.1854))(2.8557(3.9002)(4.3109)))(1.3124(1.4419(1.6497(2.1285(2.9368(3.762(8.8859)(4.6452))(3.6997))(2.7334))(1.744(2.8401(8.8254)(4.5904))(2.343)))(1.4896(3.1093)(2.1183)))(2.0418))))(1.9381))(2.0449)(1.6813))(1.3422)))(1.4906))(0.7556(1.3891(2.6198)(1.4653(2.3785(2.9089)(4.5984))(2.8905)))(1.7413)))(1.5418))(1.2031))(1.4703))(0.3894(0.39984(0.40249(0.47969(0.55661(1.4193)(1.1538))(1.1012))(0.43949(0.46402(0.51133(0.54416(0.58725(1.3177)(1.5751))(0.60037(0.60037(1.2338)(0.60924(1.3601)(0.61655(1.4616)(1.6709))))(1.3429)))(0.54479(1.1801)(0.55269(1.2124)(1.1474))))(1.0086))(0.96611)))(1.1518))(1.1422)))(1.0204))(1.3508))(0.35764(0.35791(0.35824(0.36238(0.36423(0.36634(0.36724(0.36741(0.36769(0.36931(0.37052(0.37231(0.37399(0.38117(0.38892(0.3982(0.91454)(0.40843(0.41651(0.41773(0.42172(0.46033(0.46533(0.49219(0.51013(0.5134(0.60487(1.221)(1.2217))(1.0205))(1.0907))(1.2431))(1.2578))(1.0583))(0.96616))(1.0765))(0.97108))(0.42004(0.42271(0.43256(0.44401(0.45445(0.47354(0.48484(0.64406(1.1554)(0.65903(1.2849)(1.1639)))(0.5081(0.55425(0.60925(0.65798(1.1784)(0.66679(0.68201(0.79519(1.5658)(1.4602))(1.3314))(1.2334)))(0.61741(1.234)(1.4216)(1.2925)))(1.1885))(1.1962)))(1.2323))(0.48989(1.0041)(1.5577)))(1.6524))(0.94874))(1.0178))(0.94192))))(0.89958))(1.0287))(0.43536(0.94705)(1.3239)))(0.38101(0.38234(0.39287(0.39559(0.40597(0.41426(0.42408(0.45789(0.45903(1.3012)(0.48528(1.3812)(0.59894(1.1118)(1.4459))))(0.99998))(0.93517))(0.45263(1.6174)(2.1225)(0.46419(0.5(0.58607(1.3101)(1.1652))(1.2868))(1.2391))))(1.0274))(0.40918(0.42455(1.6512)(1.1716))(1.4367)))(0.39711(0.40534(0.4061(0.41061(0.41289(1.2695)(0.45151(0.56589(1.1291)(0.59399(0.7055(1.3451)(1.5476))(1.1133)))(0.95784)))(0.43876(0.45249(0.50883(1.0386)(0.52095(0.63406(0.64266(1.4238)(0.68938(1.3424)(0.74808(1.5179)(1.2802))))(0.65045(1.463)(1.6377)))(0.53976(1.6688)(0.5775(1.5383)(1.4631)))))(0.46322(1.433)(0.47042(0.489(0.50973(0.52288(1.7934)(0.5311(1.2284)(0.5691(1.4496)(1.2697))))(0.54056(0.57956(1.1537)(1.4676))(1.2241)))(1.1654))(0.99518))))(0.44389(0.50752(1.021)(1.0089))(0.45369(1.0117)(1.4291)))))(0.93956))(1.0261))(0.92933)))(0.94804))(1.2223)))(0.42927(1.0786)(1.1064)))(1.0874))(0.88137))(0.94566))(0.88115))(1.02))(1.1849))(0.37101(0.37742(0.38729(0.9995)(0.4226(0.42341(1.3668)(0.42726(0.9971)(1.4531)))(0.42268(1.0464)(1.0306))))(0.88193))(0.48362(1.0105)(0.49595(0.64604(1.2719)(1.1693))(1.451))))(1.3289))(1.0))(0.36919(0.8943)(1.037)))(1.0714)))(1.192))(0.37021(0.91333)(0.90508)))(0.91433))(1.4094))(0.91807))(0.34156(0.34307(0.37135(0.37804(0.40869(1.3644)(1.0345))(0.38247(1.0372)(0.63234(1.829)(1.3784))))(0.37754(1.0112)(1.0312)))(0.34499(1.1517)(0.41358(0.97188)(1.0918))))(1.2225)))(1.1877))(0.40701(1.1633)(0.98063)))(0.36887(0.36916(0.37388(0.38023(0.40956(0.413(0.45214(0.74889(1.6417)(1.2782)(0.87899(1.3806)(1.4851)))(1.02))(0.92395))(1.1033))(1.265))(0.95027))(0.47931(1.5113)(1.8233)))(1.4053)))(0.34104(0.3412(0.3475(1.2423)(0.3644(0.3648(0.44261(1.164)(0.9724))(0.37309(0.37348(0.37545(0.37921(0.38253(0.41313(0.41677(0.41683(0.41886(0.42325(0.42431(0.44(0.44982(0.45275(0.48631(0.50041(1.0048)(0.50806(0.51482(0.54683(0.57258(0.57937(0.65629(0.68003(1.4538)(0.79411(1.3505)(0.85086(1.405)(0.87574(1.4409)(1.4505)))))(1.2868))(1.1682))(1.949))(1.2614))(1.1759))(1.0683)))(1.1817))(1.0291))(0.45871(0.53047(0.53139(1.8586)(0.53828(1.102)(1.6482)))(1.0517))(0.54705(1.0548)(1.2134))))(1.0278))(1.1318))(0.96843))(0.93949))(0.52822(1.1796)(0.57338(1.0908)(1.1298))))(1.1317))(1.1664))(0.40791(0.41096(1.1188)(0.45331(0.53234(0.56095(1.2985)(0.62042(1.1646)(1.1566)))(1.1641))(0.45387(0.59176(1.2644)(1.4392))(1.4053))))(1.106)))(0.99463))(1.0775))(0.91774))(1.1576)))(1.0374)))(1.5609))(0.84269)))(0.91216))(0.41137(0.93983)(0.96584)))(0.84664))(0.3395(0.34259(0.35203(0.39371(0.40663(0.40884(0.41197(1.0619)(0.44592(0.96935)(0.454(0.45765(0.45846(0.484(0.4879(0.49662(0.52704(0.52717(1.1758)(0.52852(0.54316(0.55569(0.57876(1.326)(1.1572)(2.1106))(1.6794))(1.0975))(1.2372)))(0.56478(1.2121)(1.2906)))(1.1393))(0.52435(0.54293(1.1481)(1.1279))(1.0371)))(0.51988(0.55933(0.63627(0.67461(1.4566)(1.324))(1.3184))(1.2114))(1.1111)))(1.0734))(1.0426))(1.4167))))(0.51419(1.0191)(0.59114(1.8474)(1.1695))))(0.4745(0.99678)(1.0709)))(1.2288))(0.39744(0.47053(0.98491)(1.006))(1.0524)))(1.075))(1.0601)))(0.36768(0.97632)(0.93098)))(1.1072))(0.33494(0.46907(0.47978(0.57278(0.62203(1.3711)(0.64533(0.73218(0.78516(0.79327(0.87708(0.89792(0.9118(1.5933)(0.97482(1.5452)(1.671)))(1.5353))(1.3788))(1.7469))(0.87336(1.6245)(1.5952)))(1.388))(0.64616(1.4645)(1.3001))))(1.1275))(1.228))(1.517))(0.97571)))(1.2565))(0.90511))(0.95294))(0.86353))(0.82906))(1.2446))(0.9681))(0.34953(0.35889(0.36242(0.38546(0.42343(0.43296(0.43846(0.44226(0.44807(0.45473(0.47551(0.48706(0.99048)(0.53266(1.3772)(1.0483)))(1.0719))(0.48481(0.53593(0.53902(0.58301(1.3725)(0.72222(1.2684)(1.4994)))(1.1671))(0.64502(1.1863)(1.2128)))(1.294)))(1.1504))(1.6046))(0.44058(0.48413(1.2975)(0.49646(0.54586(0.56184(1.5014)(0.57132(1.2341)(1.305)))(1.1836))(1.2632)))(0.95932)))(1.2191))(1.1235))(1.0107))(0.38491(1.7871)(0.39274(0.9533)(0.92639))))(0.91305))(0.8595)))(0.39182(0.45339(1.3832)(0.98823))(1.2289)))(1.258))(1.2865))(0.4413(1.1887)(0.94583)))(0.86283))(1.0347))(0.33553(0.87688)(0.91778)))(1.1295))(1.473))(0.82572))(1.228))(0.83498))(0.88102))(1.0504))(0.31766(0.40428(0.7269(1.6326)(2.2532))(1.3709))(1.2901)))(0.3409(0.93236)(0.8583)))(1.2753))(0.81538))(0.85811))(0.9956))(0.95488))(0.81972))(1.0854))(0.95677))(0.34612(0.92762)(0.88574)))(0.88249))(0.90442))(0.28527(0.8738)(0.9912)))(0.88711))(0.3928(1.1344)(0.40947(0.93007)(1.4502))))(0.42121(1.2762)(0.99515)))(1.0444))(0.89723))(1.0585))(1.1988))(0.83694))(0.9461))(0.77683))(0.76045))(1.0387))(0.77635))(0.76245))(0.85308))(0.90344))(0.30414(0.82942)(0.93204)))(0.79372))(0.78469))(0.24882(0.26449(0.26886(0.92333)(0.27793(0.28993(0.29657(0.82948)(0.86156))(0.89615))(0.35442(0.36394(0.44573(0.96131)(1.1874))(0.36829(0.37372(0.47352(0.49425(0.54337(0.58662(0.60537(1.1186)(1.4421))(1.4354))(1.2143))(1.312))(1.1008))(0.3938(0.40056(1.0452)(1.1093))(1.1781)))(0.97017)(1.0994)))(0.94527))))(0.77781))(1.2498))(1.4027))(0.75741))(0.84874))(1.0193))(0.88331))(0.96542))(0.78551))(0.22705(0.23782(0.23987(0.25141(0.25723(0.26157(0.26278(0.26698(0.26971(0.27823(0.27933(0.2802(0.2811(0.28243(0.29434(0.29821(0.30127(0.30473(0.30708(0.31555(0.32095(0.32253(0.32514(0.33445(0.33798(0.35343(0.39286(0.46079(1.0608)(0.46096(1.0039)(1.0193)))(1.1011))(0.9417))(0.90758))(0.34161(0.34575(0.35042(0.35137(0.35409(0.35588(0.3564(0.36295(0.36312(1.1695)(0.37254(0.40796(0.45435(1.1596)(0.48306(0.5429(0.54656(1.2352)(0.5561(1.0597)(1.2727)))(1.1461))(1.063)))(1.1296))(0.39261(0.40519(0.414(0.42901(0.43237(0.4377(0.45243(0.45583(0.46991(0.48479(0.49573(0.55739(1.4162)(0.59175(1.0929)(1.1537)))(0.50352(0.50945(0.52593(0.55839(1.5426)(1.2608))(0.56134(2.1845)(1.1972)))(2.0049))(0.55455(1.1344)(1.0946))))(0.49979(1.2392)(1.0405)))(1.0154))(0.45781(0.47175(0.48033(0.48833(1.5927)(0.49137(0.50245(0.52594(0.5401(0.57424(0.61847(0.66245(1.3745)(1.3579))(1.182))(1.1804))(0.584(1.2903)(0.6537(0.72495(1.3292)(1.3625))(1.225))))(1.1887))(1.0472))(1.0421)))(1.535))(0.98233))(0.96443)))(0.49711(1.0336)(1.1199)))(1.1217))(0.97991))(1.0211))(0.9825))(1.1926))(0.92191))))(0.89723))(0.92611))(1.0236))(1.1767))(0.47012(1.0899)(1.4021)))(0.85069))(0.95275))(0.42186(1.0645)(0.99592))))(0.89946))(0.51225(1.106)(1.442)))(0.82277))(0.31654(1.0269)(0.38272(0.88544)(0.95008))))(1.1853))(0.88317))(0.92908))(1.0656))(0.92556))(0.92103))(0.36484(0.89949)(0.37712(1.0368)(0.91545))))(0.8214))(0.82013)(1.4779))(0.32957(1.0445)(0.88273)))(0.2931(0.364(0.97082)(0.89544))(0.29495(0.418(1.0839)(0.4233(0.95361)(0.99758)))(1.1687))))(0.28902(0.46964(1.6015)(1.1927))(0.81266)))(0.32315(0.91273)(1.1066)))(0.27164(0.30663(0.5625(1.0706)(1.2634))(0.97264))(1.1315)))(0.81616))(0.8889))(1.0653))(0.2478(0.8437)(0.33048(0.43675(1.0482)(1.2239))(0.9523))))(0.74552)))(0.73409)))(0.21179(0.21249(0.22262(0.22924(0.24441(0.25956(0.29025(0.2951(0.30294(0.30485(0.30788(0.3129(0.3133(0.3135(0.31862(0.31903(0.32264(1.0867)(0.3259(0.32677(0.33065(0.33496(0.34572(0.35796(0.37973(0.38284(1.3849)(0.41588(0.46546(1.0923)(0.49391(0.50113(0.56439(0.60257(1.1185)(0.66431(0.69497(1.235)(1.326))(1.2013)))(1.1743))(1.1175))(1.2019)))(0.41933(0.45924(1.006)(1.1008))(1.0551))))(1.1241))(1.3447))(0.39465(0.47925(0.53989(0.68677(0.74013(1.299)(1.2692))(1.1977))(1.1392))(1.1521))(1.4591)))(0.88051))(0.94555))(1.087))(1.0562)))(0.82305))(1.0892))(0.92134))(0.93652))(0.87467))(0.83875))(0.90563))(0.31723(1.1304)(0.83546)))(0.96127))(0.80923))(1.6255))(0.75504))(0.98187))(0.3403(0.36547(0.98352)(0.54181(1.4636)(0.7805(1.6779)(1.5896))))(1.1678)))(0.21686(0.2358(0.25571(1.075)(0.97273))(1.1824))(0.75931)))(0.72911)))(0.88215))(0.9874))(0.87008))(0.74871))(0.24513(1.0215)(0.78974)))(0.75444))(0.75536))(0.90163))(0.70386))(0.79569))(0.20358(1.1284)(0.96002)))(0.73803))(0.80653))(0.7976))(0.94846))(0.75176))(0.91787))(1.2838))(0.95097))(0.71529))(0.83899))(0.82033))(0.88178))(0.75037))(0.25548(0.98737)(0.8642)))(0.71835))(0.72106))(1.0814)))(0.84694))(0.70244))(1.0755))(0.82786))(1.1015))(0.67952))(0.92597))(1.0042))(0.70286))(0.76656))(1.0329))(0.16927(0.72103)(0.7056)))(0.67624))(0.68367))(0.68484))(0.68726))(0.78273))(0.24264(0.82065)(0.75995)))(0.65401))(1.0117))(0.88883))(0.67233))(0.64752))(0.71829))(0.9455))(0.97793))(0.16116(0.1945(0.22879(0.23837(0.80573)(1.2699))(0.7939))(0.19481(0.25196(1.0303)(0.27039(0.2756(0.3007(0.85106)(0.34953(0.40046(1.02)(0.43169(0.46916(1.5478)(1.1111))(0.94509)))(0.94825)))(0.3543(0.42347(0.48515(1.021)(1.1639))(0.99711))(0.87552)))(0.78133)))(0.73163)))(0.66349)))(0.71339))(0.93872))(0.63696))(0.71153))(0.62736))(0.1324(0.64424)(0.68458)))(0.67074))(0.79422))(0.62862))(0.66515))(0.77578))(0.12407(0.71562)(0.82665)))(1.467))(0.64703))(0.71713))(0.74792))(0.18817(0.93869)(0.23683(0.76161)(0.75107))))(0.2416(0.76766)(0.37054(0.87466)(1.2463))))(0.72647))(1.304))(0.13358(0.83997)(0.77413)))(0.10555(0.15122(1.1752)(0.72233))(0.68066)))(0.67498))(0.091966(0.12229(0.13611(0.17251(0.75911)(0.20264(0.82912)(0.27978(1.003)(0.80844))))(0.16388(0.22627(0.22795(0.89832)(0.23195(0.82874)(1.3776)))(0.82702))(0.67783)))(1.2643))(0.09313(0.67628)(0.82657))))(0.74949))(0.69124))(0.68913))(0.90907))(0.10624(0.63135)(0.78755)))(0.66904))(0.62672))(0.67558))(0.34939(0.93448)(0.87708)))(0.69352))(0.86924))(0.60631))(0.66745))(0.56238))(0.59319))(0.64835))(0.61867))(0.58399))(0.58097))(0.14665(0.96245)(0.73641)))(0.07643(0.082235(0.83793)(0.23599(0.98964)(0.79505)))(0.5983)))(0.66857))(0.61177))(0.68314))(1.1661))(0.6764))(0.68197))(0.56648))(0.60695))(0.76371))(0.14766(0.7879)(1.343)))(0.61121))(0.67893))(0.078603(0.70491)(1.0302)))(0.75978))(0.66343))(0.54049))(0.72574))(1.3742))(0.57155))(0.60123))(0.62867))(0.78367))(0.75109))(0.78817))(0.58158))(0.54196))(0.93844))(0.53187))(1.2126))(0.67252))(0.47438))(0.47324))(0.13232(0.72198)(0.94124)))(1.0038))(0.43649))(2.0131))(0.568))(0.46112))")
    val tree2 = parseTree("(-0.27698(-0.18355(-0.15953(-0.12865(-0.074792(-0.074669(-0.03825(-0.036008(-0.012322(2.0599e-42(3.1557e-41(3.3991e-41(3.4522e-41(6.21e-41(0.00072921(0.0015794(0.010683(0.021277(0.0218(0.024749(0.028221(0.035133(0.051493(0.058568(0.060534(0.061114(0.062936(0.073202(0.076792(0.080317(0.081708(0.082594(0.085047(0.085785(0.088579(0.089003(0.089658(0.091273(0.094157(0.097099(0.098731(0.10474(0.10805(0.10867(0.10917(0.10988(0.11088(0.11179(0.11345(0.11375(0.11386(0.11548(0.11762(0.11828(0.11946(0.12212(0.12277(0.1231(0.12432(0.12593(0.12776(0.131(0.1316(0.13208(0.13353(0.13466(0.13611(0.13872(0.13885(0.14183(0.14572(0.14637(0.14874(0.14955(0.15077(0.15223(0.15372(0.15494(0.15646(0.15779(0.16067(0.16073(0.16117(0.16184(0.16336(0.1634(0.16521(0.16891(0.17086(0.17104(0.17148(0.173(0.17512(0.17673(0.17677(0.17741(0.17911(0.17963(0.17985(0.18014(0.18052(0.18062(0.1819(0.18232(0.18309(0.18339(0.18455(0.18603(0.18674(0.18769(0.18797(0.18809(0.18901(0.19078(0.19137(0.19146(0.19292(0.21265(0.21314(0.22214(0.22511(0.23224(0.23957(0.24115(0.29431(0.30029(1.1348)(0.97413))(0.35158(0.37429(0.98731)(0.42952(0.48511(0.5374(0.55997(0.65195(1.2851)(1.4841))(0.56139(1.1327)(1.1047)))(1.1358))(1.1102))(0.62928(1.2713)(1.1562))))(0.87586)))(0.24971(0.3964(0.97542)(0.40713(1.3064)(1.0141)))(1.2446)))(1.0416))(0.75027))(0.87756))(0.80701))(0.72974))(0.82634))(0.19354(0.19407(0.19467(0.19677(0.19724(0.19875(0.20008(0.20023(0.20081(0.20093(0.20211(0.20233(0.20486(0.20512(0.20636(0.20672(0.20756(0.20948(0.20962(0.21097(0.21151(0.21283(0.21311(0.21623(0.21676(0.21744(0.21849(0.21864(0.22071(0.22113(0.22338(0.22864(0.2296(0.22977(0.25782(0.26767(0.27345(0.27672(0.28516(0.34234(0.3433(0.34387(0.42345(1.0333)(0.51343(1.1202)(0.54666(0.55857(1.0911)(0.56594(0.58671(2.2082)(1.2514))(1.1026)))(1.703))))(1.0547))(0.34331(0.37496(0.41935(0.44457(0.44793(1.0469)(0.45665(0.46224(0.53699(0.63673(1.3056)(1.1459))(0.53959(0.55817(0.57663(0.58594(0.62864(0.68789(0.74029(0.78543(1.7271)(1.3046))(1.5227))(1.2139))(1.2912))(1.1144))(0.62797(0.6318(1.1685)(0.66375(1.2466)(1.2838)))(1.6094)))(0.5859(1.1813)(1.2336)))(1.1807)))(1.3148))(1.1556)))(1.0811))(1.5591)(0.43717(1.1424)(0.94705)))(0.99207))(0.37869(0.3958(0.39676(0.42696(0.42932(0.43169(0.46401(0.4668(0.55659(0.58451(1.2832)(1.2654))(1.1397))(0.55796(1.1943)(1.4672)))(1.0052))(0.43917(0.44501(1.1683)(0.48213(1.417)(0.66953(1.9095)(1.4226))))(1.2927)))(0.51929(1.4915)(1.0885)))(1.3336))(1.0982))(1.0502))(0.3826(0.38662(1.2663)(1.1196))(0.38965(0.96569)(0.42283(1.1406)(1.0163)))))))(0.34389(0.36241(0.90132)(0.94682))(0.34989(0.93995)(0.41964(0.43059(1.4267)(1.4031))(0.45294(1.1663)(1.1627))))))(0.80138))(0.28221(0.31732(1.3259)(0.3992(0.95798)(0.5863(0.64378(0.67762(0.82612(1.5313)(1.5385))(1.4343))(1.2418))(1.0931))))(0.30724(0.87129)(0.93771))))(1.3813))(0.87228))(0.29644(1.1364)(0.96082)))(0.23068(0.23398(0.23417(0.23572(0.23594(0.23749(0.23788(0.24077(0.24104(0.24122(0.24611(0.24644(0.24731(0.25091(0.26073(0.26119(0.27465(0.29054(0.33005(0.34095(0.34509(0.3458(0.35165(0.40881(0.41696(0.42224(0.42424(0.43201(0.51759(0.52387(1.0447)(0.54203(1.0659)(1.3068)(0.55727(1.1379)(0.63701(0.6397(0.73383(0.74368(1.5196)(1.5076)(0.74638(0.76512(1.4733)(1.3469))(0.77657(1.2805)(0.7844(0.8266(1.4854)(0.82861(1.4217)(0.84177(1.6336)(1.6899))))(1.5342)))))(1.2776))(1.238))(1.183)))))(1.2229))(0.9833))(0.95218))(1.557))(1.5067))(0.43879(1.268)(1.5319)))(1.1593))(0.95865))(0.43847(0.97273)(1.4031))(0.95934))(0.95099))(0.96972))(0.30363(0.32694(0.39526(0.40248(0.40768(0.97492)(0.41008(0.42319(0.49067(1.0983)(1.0392))(0.42567(0.45464(1.177)(0.46925(0.60834(1.1448)(1.2875))(1.0387)))(0.96544)))(0.92041)))(0.90593))(1.4491))(0.88791))(1.0115)))(1.3236))(0.98421))(0.97272))(0.925))(0.25026(0.25254(0.25257(0.25361(0.2586(0.25924(0.25983(0.26093(0.26361(0.2647(0.26555(0.26588(0.2666(0.26672(0.26804(0.26915(0.26978(0.26987(0.27251(0.27625(0.27795(0.27902(0.28091(0.28139(0.28266(0.28394(0.28479(0.28951(0.29331(0.29438(0.29478(0.29513(0.29598(0.29752(0.29858(0.30036(0.30063(0.30127(0.30152(0.30383(0.30484(0.30523(0.30556(0.30782(0.30848(0.30889(0.30951(0.31331(0.3158(0.31682(0.3196(0.32213(0.32234(0.32259(0.32627(0.32656(0.33149(0.33197(0.33646(0.33695(0.33857(0.34608(0.34611(0.34795(0.35204(0.35211(0.3568(0.35801(0.36068(0.3646(0.36493(0.3659(0.37017(0.3703(0.37064(0.37362(0.38356(0.38468(0.38727(0.39313(0.39896(0.42487(0.43781(0.4393(0.53645(0.5684(0.59493(0.60811(0.62728(0.6486(0.65077(0.75793(1.8064)(1.0223(1.2599(2.7559)(1.7714))(1.0797(1.2225(2.3592)(1.8753))(1.9336))))(1.2848))(0.65971(0.69543(0.69956(0.7132(0.77869(0.85043(0.85704(1.1336(1.3242(1.4425(2.6221)(1.4455(1.8737(2.5296)(2.4852)(3.6161))(1.4494(1.5081(1.5832(2.8007)(1.8874(2.4304)(1.9541(2.617)(2.4917))))(1.5452(2.1403(2.6469)(3.3706))(1.6226(2.6433)(2.4531))))(2.7755))))(2.3515)(2.3042))(1.9346))(0.87615(0.93788(0.98673(1.05(1.7322)(1.1046(1.6209(2.274)(3.0826))(1.333(1.8715(2.2702(3.1502)(2.8395))(2.6756))(2.2513))))(1.4911))(1.5657)(1.5369))(1.034(1.5528)(1.5942))))(1.5908))(0.82125(0.83395(0.85722(0.85816(0.93456(0.97049(0.99784(1.0619(1.1753(1.2979(1.3098(1.359(1.4034(1.9822(2.1984(3.6593)(2.3182(3.0718)(2.662(5.4803)(4.437))))(2.1071(3.0282)(2.9825)))(1.4652(2.3133)(2.4436)))(1.8227(2.4817)(2.7058)))(2.6838))(1.3292(1.4406(1.4407(1.4766(1.5567(1.6836(1.7503(1.7655(1.9193(1.932(1.9792(2.0733(2.0899(2.3532(3.7674)(3.1863))(2.1195(2.7169)(3.0342(3.5709)(3.5424))))(2.9361))(2.7127))(2.0612(3.1856)(2.7175)))(3.6953))(4.2119))(2.2651))(2.5897))(2.1722))(1.9993))(1.5088(1.6994(2.2148)(2.9518))(2.5074)))(2.0818)(2.9951))(1.4873(1.8404(1.9676(3.2271(3.8934)(5.3434))(2.5227))(3.0743))(1.4946(1.5373(1.6306(1.8094(2.4697)(2.2171(3.1303)(4.9546)))(3.1033))(2.3363))(1.762(2.3416)(2.5459))))))(1.1972(1.8837)(1.2555(1.7891(2.0063(3.2591(3.9404)(4.0602))(2.9249))(3.9136(4.7452)(5.1361)))(1.9475))))(1.7669))(1.6458))(0.99118(1.7456)(1.5087)))(1.9285)(1.9778))(1.5143(1.7214(5.8418)(2.8631))(4.4592)))(1.0854(1.1863(2.0146)(1.7355))(1.5504(2.1613)(2.0583))))(1.3423))(1.6839)))(1.2695))(1.3919))(1.2866))(0.9181(0.9221(1.1639(2.0254)(1.8991))(1.7468))(1.5253))))(1.2303))(1.1819))(1.2026))(1.0015(1.8254)(2.5655)))(1.084))(0.44305(0.44368(0.46156(0.47324(0.48251(0.49308(0.50634(0.51466(0.52763(0.52803(0.54217(0.55045(0.56045(0.56677(0.60822(1.2415)(0.68609(1.4501)(0.69411(0.69565(0.73225(0.81243(1.7953)(1.4772))(1.4415))(1.2881))(1.6667))))(1.1375))(1.3662))(0.57675(0.58521(0.60244(1.1734)(1.2718))(1.9784))(1.1694)))(1.3605))(1.2293))(1.1751))(1.0366))(1.1298))(1.0504))(1.0132))(1.1589))(1.5829))(1.3278))(1.0297)))(0.43919(0.46022(0.46538(1.0705)(0.47233(0.48497(0.49943(0.5343(0.63339(0.64548(0.65896(1.2486)(1.4563))(1.3838))(1.2249))(0.56506(1.1138)(0.6178(1.4156)(1.5217))))(1.0339))(0.60717(1.3577)(1.1771)))(1.2868)))(1.0895))(0.49773(0.51087(1.4399)(0.51524(0.52433(1.0267)(1.1635))(1.6633)))(2.0303))))(0.98981))(0.42494(1.0541)(0.96989)))(1.7932))(0.98044))(1.0615))(1.1013))(0.38921(1.2548)(1.0199)))(0.87241))(0.37368(0.37914(0.42361(1.0208)(1.0292))(1.1874))(1.1004)))(1.1919))(0.39074(0.39798(0.41625(0.93623)(1.138))(0.43443(1.0941)(0.4592(0.47886(0.55393(0.6382(0.63924(1.2753)(1.1967))(1.8796))(1.0729))(0.48411(1.243)(0.51146(1.4103)(0.5185(1.2453)(1.1971)))))(1.1214))))(0.97928)))(0.95029))(0.90769))(1.283))(0.42285(0.97199)(0.97927)))(0.35793(0.41956(0.94272)(0.94531))(0.37258(0.37965(0.9079)(0.46268(1.2411)(1.0101)))(1.1846))))(0.35958(0.39914(0.40177(1.0906)(0.41314(0.47911(1.1712)(0.53458(1.1997)(1.1602)))(1.3872)))(1.0627))(0.88204)))(1.1446))(1.0862))(0.40212(1.0922)(1.1442)))(1.0814))(0.88124))(1.1791))(0.84636))(0.34149(0.34401(0.34745(0.34953(0.34974(0.35522(0.3579(0.37762(0.38243(0.46696(1.5103)(0.98489))(0.38497(0.40869(0.41036(0.42427(0.42927(0.4337(0.43611(0.54536(0.55504(0.56212(0.58161(0.62326(1.4774)(0.65073(0.66446(0.67318(1.2192)(0.69217(3.6036)(1.4577)))(1.4971))(1.5499))(1.581))(1.5321))(1.1706))(1.4819))(1.656))(0.45232(0.46893(1.0323)(1.3519))(2.1194)))(1.2982)(1.7125))(0.95788))(0.45536(0.55451(0.56826(0.58653(0.6326(1.1766)(1.3879))(1.3175))(1.0872))(1.3928))(0.48997(1.017)(1.2414))))(1.0889))(1.561))(0.93056)))(0.93922))(0.36156(0.40356(0.51644(1.0174)(1.1276))(1.0171))(0.95406)))(0.94328))(0.38147(1.2653)(0.89009)))(0.96505))(0.41669(1.1659)(1.3477)))(0.88342))(0.85633)))(0.8388))(1.0997))(0.95178))(0.32902(0.35698(0.37049(0.39246(0.39421(0.42327(0.42646(0.51525(0.51699(0.51901(0.56358(1.1055)(0.60837(1.1132)(1.3122)))(2.2533))(0.5193(0.52752(0.55313(1.0778)(0.56427(0.59761(0.61255(1.2271)(2.5631))(1.4526))(0.61053(1.199)(1.4201))))(2.3519))(1.1145)))(1.1515)(1.2037))(1.058))(1.6618))(1.1173))(1.3274))(1.0609))(1.1303))(0.84072)))(0.89009))(1.2203))(0.96503))(0.82609))(0.32113(0.32308(0.32376(0.32843(0.33126(0.33631(0.35008(0.36467(0.36889(0.37374(0.43926(0.43962(0.46252(0.50589(0.51491(0.57221(0.58417(0.67301(1.3188)(0.70633(0.82947(0.95178(1.5286)(2.0398))(1.5075))(1.4741)))(0.60156(1.2384)(0.63025(0.63485(1.7142)(0.64566(2.186)(1.4464)))(1.4698))))(1.2649))(1.2436))(1.2888))(1.3471))(0.45057(0.49841(0.51011(0.51336(1.1722)(0.51741(0.52454(0.541(0.5426(0.5596(0.56013(1.1084)(0.56381(0.5676(1.4772)(0.61469(0.64927(0.65307(1.2139)(1.1625))(1.3103))(1.2996)))(0.6329(1.3681)(1.2967))))(1.1048))(0.62598(1.2486)(1.3883)))(1.0752))(1.1587))(1.2178)))(0.57666(1.2654)(1.7203)))(1.8403))(1.1142)))(1.344))(0.92333))(0.92879))(0.90883))(0.9348))(0.85839))(1.3213))(0.92017))(0.8251))(0.35718(1.058)(0.91818)))(0.38971(0.55819(1.0627)(1.2614))(0.89937))))(0.3934(1.5791)(1.256)))(0.87887))(0.93546))(0.32186(1.5807)(1.0335)))(0.3083(0.33893(0.94185)(0.36873(1.0196)(0.91523)))(0.37801(1.0482)(1.064))))(0.91476))(0.35192(0.92086)(1.5565)))(0.97099))(0.96934))(0.93585))(0.31996(0.32006(0.32777(0.35234(0.37919(0.3976(0.40209(0.40913(0.411(0.41526(0.41708(0.43431(0.4496(0.47678(0.49731(0.50803(0.50879(1.0989)(0.52544(1.0436)(0.60787(0.7947(1.9129)(1.6826))(1.3017))))(0.53631(1.0812)(1.5618)))(1.1707))(1.3346))(0.95119))(0.52639(1.0723)(1.5532)))(0.42392(0.45001(0.45002(0.46098(0.48489(0.48798(0.52591(1.0829)(0.56174(0.71878(0.72208(1.273)(0.74912(0.95738(1.5533)(1.5954))(0.85718(1.6129)(1.4319))))(1.2776))(1.4032)))(0.67811(1.2204)(1.4662)))(1.0061))(0.4761(0.4905(0.49195(0.4971(0.49949(0.5216(0.53495(0.74944(1.5358)(1.9046))(0.53557(0.58383(0.64847(0.72428(2.2635)(1.3172))(0.66079(1.2909)(1.4054)))(1.1425))(0.53683(1.4586)(1.0481))))(0.56351(1.1043)(1.1689)))(1.0544))(1.01))(0.53621(0.56517(1.5167)(1.3732))(0.77655(1.429)(1.7778))))(1.2583))(1.4559)))(1.0526))(1.4938))(0.99608)))(1.8423))(0.98359))(0.93371))(1.0188))(0.90842)(1.0926))(0.91021))(1.8668))(0.84819))(1.6897))(0.8918)))(0.36512(0.94501)(1.0428)))(0.86485))(0.8552))(0.79828))(0.91988))(0.34463(0.35046(0.41778(0.9231)(1.5604))(0.95721))(0.34884(0.35336(0.35381(0.36062(0.42326(1.4182)(0.46298(1.7796)(1.3123)))(0.36086(0.50514(0.52842(0.76144(0.79424(1.564)(1.4528))(1.3429))(1.1677))(1.1443))(0.45719(0.96563)(1.0534))))(1.449))(0.99452))(0.97488))))(1.0219))(0.79575))(0.3339(0.35148(0.99984)(1.1448))(0.9072)))(1.1846))(1.2857))(0.7946))(0.91718))(0.82614))(0.32257(1.222)(1.4329)))(0.8097))(0.99854))(0.9557))(0.86065))(0.27057(0.27404(0.27734(0.27771(0.28706(0.29931(0.30278(0.30613(0.31905(0.32206(0.34494(0.40324(0.43571(0.46602(1.0383)(1.0052))(0.48344(1.1405)(1.0454)))(1.1387))(0.91735))(0.32404(0.33631(0.34011(0.34644(0.46731(0.48968(0.49904(0.54356(0.57172(1.1121)(1.1016))(0.66744(1.7791)(1.2872)))(1.069))(1.4658))(1.006))(0.34653(0.3899(0.46744(0.50488(1.2195)(1.2774))(1.1237))(1.3121))(1.0719)(1.3705)))(1.0693))(0.34197(0.34878(0.35278(0.36218(0.36299(0.37505(0.37595(0.38456(0.39911(0.41817(1.1023)(1.0189))(0.4141(0.4395(1.0409)(1.0574))(0.41892(0.93929)(0.97676))))(0.39241(0.41929(0.96382)(0.53198(0.60996(1.2015)(1.1245))(1.2585)))(0.39689(0.41678(1.0078)(1.0404))(1.0565))))(1.0946))(1.0128))(1.3492))(0.41986(1.2156)(0.98654)))(0.87921))(0.90178))(0.99265)))(0.94261)))(0.84049))(0.39118(0.94938)(0.89704)))(0.8225))(1.0669))(1.0153))(1.002))(1.0782))(0.27902(1.4065)(0.29919(0.31101(0.31109(1.0501)(0.3155(0.32255(1.4303)(0.36609(0.3723(0.37371(0.39337(0.40114(0.40236(0.40245(0.44306(0.50721(1.1859)(1.6328))(0.45845(0.47595(0.50864(1.2648)(1.0576))(1.6933))(1.0366)))(0.44747(0.48912(1.035)(0.49892(1.4076)(1.311)))(0.54266(1.1122)(1.1485))))(0.44202(0.98022)(0.48067(0.51656(0.60278(1.1866)(1.3237))(0.82145(1.8033)(2.2456)))(1.0282))))(1.0589))(0.96781))(0.98977))(1.1528))(2.0708)))(0.38128(0.3857(0.40092(1.015)(1.1265))(1.0633))(1.0838))))(1.3012))(1.3824))))(0.90613)))(0.78428))(0.90101))(0.82926))(0.93351))(1.1517))(0.28262(0.79704)(0.82509)))(0.30451(1.0923)(1.253)))(1.3832))(0.26892(0.3154(0.32293(0.96819)(0.87553))(0.86072))(1.0923)))(0.82011))(0.37268(0.9823)(0.52802(0.55194(0.58092(0.58481(0.59819(1.226)(0.60884(0.61125(1.1463)(1.6756))(1.9987)))(0.62542(2.3696)(1.3619)))(0.64179(0.67183(0.70249(1.5008)(1.4748))(0.67467(1.5604)(1.2415)))(0.73165(0.73502(1.357)(1.2886))(1.4424))))(1.3794))(2.0676))))(0.85954))(0.99288))(0.7862))(0.92457))(0.31748(0.32786(0.86045)(0.33993(0.41775(0.97424)(1.2266))(0.98612)))(0.81929)))(0.94425)))(0.7511))(1.2722))(1.0896))(0.74568))(1.1775))(0.74265))(1.0885))(0.91045))(0.75869))(0.76516))(1.0483))(0.77201)))(0.76535))(0.74586))(0.95422))(0.72909))(0.99076))(0.88515))(0.75783))(0.88122))(0.80957))(0.90855))(0.24(0.247(0.26871(0.29112(0.30569(0.83165)(0.32661(0.35824(0.37026(0.38798(0.41486(1.1069)(0.43419(1.0761)(0.47672(0.54329(1.0851)(0.58927(0.60901(1.2603)(0.61479(1.1328)(1.1207)))(1.769)))(1.0362))))(0.43855(0.98619)(0.94046)))(1.0571))(1.1467))(0.89393)))(1.0672))(0.36731(0.91687)(0.95088)))(1.1009))(1.3922)))(0.8804))(0.28368(0.91312)(0.98081)))(0.7712))(0.27086(0.84984)(0.95671)))(0.26792(1.1822)(1.2706)))(1.0217))(1.0803))(0.72602))(0.23317(0.79292)(0.9548)))(0.7766))(0.7151))(0.89074))(0.20335(0.76688)(0.82609)))(0.8312))(1.0825))(1.1504))(0.71921))(0.74871))(0.89474))(0.8304))(1.0889))(0.24061(0.9776)(0.81205))))(0.78205))(1.0896))(0.71081))(0.88704))(0.6907))(0.93485))(1.4012))(0.20188(1.0823)(0.39661(1.3629)(0.93346))))(0.78816))(0.80056))(1.1766))(1.0893))(0.79073))(0.7041)(0.72603))(0.18752(0.19536(0.20875(0.21493(0.24177(0.28374(1.1311)(0.30615(0.33543(0.52707(1.0685)(1.2094))(1.0109))(0.81538)))(0.26652(0.28112(0.28508(0.29677(0.37901(0.93388)(0.39576(0.41652(0.43527(0.44756(0.47392(0.48825(1.029)(0.5419(1.1794)(0.67156(1.7003)(1.3092))))(1.2273))(1.1358))(0.56228(1.1768)(1.0636)))(1.5887))(1.3853)))(0.80541))(0.90609))(0.91949))(0.43955(1.5869)(0.95219))))(1.1353))(0.21064(0.28812(0.34738(0.51231(0.57684(0.65002(0.75252(0.80112(1.4799)(1.3541))(1.6306))(0.66141(1.6183)(1.2089)))(1.2956))(1.1008))(1.071))(0.41809(0.44048(1.376)(0.4642(1.1935)(1.8183)))(1.007)))(0.23675(0.98205)(1.093))))(0.73857))(0.84781)))(0.19214(0.24059(1.3094)(0.27595(0.84034)(1.0013)))(0.96409)))(0.70241))(1.1014))(0.9866))(0.78281))(0.77995))(0.85886))(0.29161(0.93105)(0.88034)))(1.0192))(0.71513))(0.75155))(0.2176(0.72621)(0.29213(0.81151)(1.1391)))(0.83146))(0.72811))(0.90359))(0.77891))(0.70176))(0.38264(0.44804(1.2328)(1.33))(0.9644)))(0.70302))(0.70436))(0.18254(0.18819(0.22965(0.90834)(0.74225))(0.84398))(0.19129(0.22746(0.78321)(0.90704))(0.74407))))(0.69286))(1.0513))(0.90272))(0.82919))(1.0022))(0.66996))(0.86848))(0.72814))(0.77167))(1.0196))(0.7854))(0.75783))(0.86669))(0.70575))(0.68494))(0.64546))(0.14408(0.69909)(0.74768)))(0.21622(0.7792)(1.1081)))(0.7925))(0.78535))(0.64844))(1.2107))(0.89483))(0.65332))(0.16325(0.87147)(0.72654)))(0.6326))(0.8545))(0.65675))(0.66604))(0.66125))(0.65411))(0.66299))(0.65362))(0.67548))(0.6524))(0.68159))(0.81218))(1.384))(0.81183))(0.71738))(0.63315))(0.74863))(0.096411(0.60319)(0.65229)))(0.71213))(0.59609))(0.6178))(0.64951))(0.71384))(0.5913))(0.58342))(0.59218))(0.71891))(0.70168))(0.089587(0.20269(1.026)(0.71966))(0.70862)))(0.60138))(0.77431))(0.64284))(0.68513))(1.6324))(0.57873))(0.55045))(0.53195))(0.66234))(0.94995))(0.64132))(0.72529))(0.77351))(0.57733))(0.82021))(0.60778))(0.69738))(0.53611))(0.49054))(0.46961))(0.74447))(0.47572))(0.66975))(0.61364))(0.58012))(0.73808))(0.39794))")

    return Visualization(tree1, tree2, pos) { tree1E, tree2E ->
        monotoneInterleaving(tree1E, tree2E)
    }
}

fun vulc_1_ts150am_vs_151am(pos: Vector2): Visualization {
    val tree1 = parseTree("(1.2249e-41(0.0026634(0.0088814(0.017924(0.050809(0.09078(0.12229(1.2643)(1.3776))(0.09616(0.10129(0.10494(0.11293(0.12931(0.14465(0.17788(0.19115(0.21107(0.22262(0.25956(0.34572(1.3849)(1.4591))(1.6255))(1.6779))(0.21203(0.24757(0.2668(0.29175(0.35705(0.38162(0.39653(0.45866(0.46068(0.46117(1.9884)(1.5237))(0.59466(0.6837(0.68456(0.69513(1.9356)(2.1832))(1.8588))(1.7607))(1.8927)))(1.519))(1.6765))(1.6072))(1.7061))(1.4718))(0.27412(0.31319(1.3708)(1.3968))(0.38858(2.1574)(0.3997(1.5836)(0.52261(1.7175)(1.5598))))))(1.2765))(0.2145(0.22808(0.22922(0.26237(0.27022(0.28903(0.29772(0.30908(0.30942(0.31843(0.32193(0.33273(0.33667(0.34044(0.34906(0.35579(0.37272(0.56233(0.87766(0.90888(0.90966(1.0202(1.0203(1.0633(1.149(1.3305(1.3692(3.0525)(3.0313))(1.767(2.0796(2.2348(2.2762(2.7221(5.4041)(3.0299(5.3046)(3.5413(4.8258)(6.4553))))(3.322))(4.6495))(3.3833))(3.5394)))(1.2378(2.7121)(1.4702(1.5732(1.8368(4.0441)(4.9931))(4.4632))(2.5431))))(1.2128(2.2537)(1.7482(3.4702)(6.0679))))(1.0704(1.0799(2.5978)(2.3772))(2.8898)))(1.6388(3.2013)(2.9575)))(1.2913(1.5769(6.2512)(2.8557(3.9002)(4.3109)))(1.4419(1.6497(8.8859)(2.8401(8.8254)(4.5904)))(3.1093))))(1.9381))(2.0449))(1.3891(2.6198)(1.4653(4.5984)(2.8905))))(0.40252(1.4193)(0.54416(1.5751)(1.6709))))(0.36238(0.37231(0.44401(0.45445(1.5577)(1.5658))(1.6524))(0.39287(0.41061(0.45249(0.52095(1.6377)(1.6688))(1.7934))(1.5476))(0.39559(0.40918(1.6512)(1.4367))(0.41426(0.45263(1.6174)(2.1225))(1.4459)))))(0.37101(1.451)(1.4531))))(1.4094))(1.829))(0.36887(0.36916(1.6417)(0.47931(1.5113)(1.8233)))(1.4053)))(0.3412(1.5609)(0.38253(0.44982(1.949)(0.53139(1.8586)(1.6482)))(1.4392))))(0.40884(1.8474)(0.55569(2.1106)(1.6794))))(0.46907(1.517)(1.7469)))(0.36242(0.43846(0.44226(1.4994)(1.6046))(1.5014))(1.7871)))(1.3832))(1.473))(2.2532))(1.4502))(1.2762))(0.24882(1.2498)(1.4421))(1.4027))(1.1661))(0.26157(0.26698(0.27933(1.4779)(0.32253(0.35137(0.45583(0.50945(0.52593(1.5426)(2.1845))(2.0049))(0.48033(1.5927)(1.535)))(1.4021))(1.442)))(1.6015))(1.2634)))))(1.2838))(1.5149))(2.0131))(0.1945(1.2699)(1.5478)))(1.467))(1.2463))(1.304))(1.1752)))(1.0038))(1.343))(1.0302))(1.2126))(1.3742))")
    val tree2 = parseTree("(0.051493(0.10867(0.12593(0.16336(0.18052(0.18062(0.18674(0.18769(0.19292(0.20948(0.21311(0.22977(0.27345(0.27672(0.31732(1.3259)(1.5385))(0.34234(0.3433(0.34331(0.41935(0.57663(1.7271)(1.6094))(1.5591))(0.42932(1.4915)(0.43169(1.9095)(1.4672))))(0.54666(1.703)(2.2082)))(1.4267)))(1.3813))(0.24611(0.24731(0.27465(0.29054(0.34509(1.4031)(0.40881(1.5319)(0.41696(0.42224(1.6899)(1.557))(1.5067))))(1.4491))(1.3236))(0.25983(0.2647(0.26987(0.28091(0.28479(0.29513(0.30127(0.30523(0.30848(0.31331(0.3158(0.32259(0.33197(0.35211(0.3659(0.39313(0.43781(0.4393(0.5684(0.6486(0.75793(1.8064)(1.0223(2.7559)(2.3592)))(0.65971(0.77869(0.85704(1.3242(1.4425(2.6221)(1.4455(1.4494(1.5081(1.5832(2.8007)(2.617))(1.5452(2.6433)(3.3706)))(2.7755))(3.6161)))(2.3515))(1.1046(3.0826)(3.1502)))(0.85722(0.85816(0.93456(1.1753(1.2979(1.3098(1.359(1.4034(1.9822(2.1984(3.6593)(2.662(5.4803)(4.437)))(3.0282))(2.4436))(2.7058))(2.6838))(1.3292(1.4406(1.4407(1.7655(1.9193(1.932(2.0899(3.7674)(3.5709))(3.1856))(3.6953))(4.2119))(2.9518))(2.9951))(1.4873(1.8404(5.3434)(3.0743))(1.4946(1.6306(3.1033)(4.9546))(2.5459)))))(1.7891(4.0602)(5.1361)))(1.9778))(1.5143(1.7214(5.8418)(2.8631))(4.4592)))(2.1613)))(2.0254)))(2.5655))(0.46156(0.55045(1.9784)(1.7953))(1.5829)))(0.43919(0.50729(2.0303)(1.6633))(1.5217)))(1.7932))(1.8796))(1.3872))(0.34745(0.38243(1.5103)(0.40869(0.43371(0.43611(0.54536(3.6036)(1.656))(2.1194))(1.7125))(1.561)))(1.3477)))(0.42327(1.6618)(0.51699(2.2533)(0.52752(2.3519)(2.5631)))))(0.43962(0.58417(2.0398)(0.63485(1.7142)(2.186)))(0.49841(1.8403)(1.7203))))(1.5791))(1.5807))(1.5565))(0.32006(0.35234(0.41526(1.8423)(0.41708(0.43431(0.50803(1.9129)(1.5618))(1.5532))(0.45001(0.46098(0.49195(0.53495(2.2635)(1.9046))(1.7778))(1.6129))(1.4938))))(1.8668))(1.6897)))(0.34463(1.5604)(0.35381(0.36062(1.564)(1.7796))(1.449))))(1.2857))(1.4329))(0.27404(0.33631(0.34644(1.7791)(1.3705))(1.3492))(0.27902(1.4065)(0.29919(0.32255(1.4303)(0.36609(0.40236(0.40245(0.44306(1.6328)(1.6933))(1.4076))(2.2456))(2.0708)))(1.3824)))))(1.3832))(0.52802(0.58481(0.60884(1.6756)(1.9987))(2.3696))(2.0676))))(1.2722)))(0.24(1.769)(1.3922)))(1.2706))(0.24115(1.3064)(1.4841)))(1.4012))(1.3629))(0.20875(0.26652(1.5869)(0.41652(1.7003)(1.5887)))(0.28812(1.6306)(1.8183))))(1.3094))(1.33))(1.2107))(1.384))(1.6324))")

    return Visualization(tree1, tree1, pos) { tree1E, tree2E ->
        monotoneInterleaving(tree1E, tree2E)
    }
}

fun vulc_25_ts150am_vs_150pm(pos: Vector2): Visualization {
    val tree1 = parseTree("(0.56233(0.90966(1.0633(1.149(2.7221(5.4041)(6.4553))(1.5732(4.4632)(4.9931)))(6.0679))(1.2913(1.5769(6.2512)(4.3109))(1.6497(8.8859)(8.8254))))(4.5984))")
    val tree2 = parseTree("(0.2397(3.1925)(0.543(0.98799(1.3234(1.7029(3.4772(6.4383)(5.9871))(6.0748))(1.629(4.7824)(4.2939)))(1.2587(1.3776(2.0052(7.6294)(6.0667))(9.4685))(7.3541)))(3.2373)))")

    return Visualization(tree1, tree2, pos) { tree1E, tree2E ->
        monotoneInterleaving(tree1E, tree2E)
    }
}

fun vulc_25_ts151am_vs_151pm(pos: Vector2): Visualization {
    val tree1 = parseTree("")
    val tree2 = parseTree("")

    return Visualization(tree1, tree2, pos) { tree1E, tree2E ->
        monotoneInterleaving(tree1E, tree2E)
    }
}

fun main() = application {
    configure {
        width =  800//3500
        height = 700
        title = "Visualizing interleavings"
        windowResizable = true
    }
    program {
        val camera = Camera()

        var blobsEnabled = true

        val visualization = vulc_25_ts150am_vs_150pm(drawer.bounds.center)

        println("Delta: " + visualization.interleaving.delta)

        println("T1 Number of leaves: " + visualization.tree1E.leaves.size)
        println("T2 Number of leaves: " + visualization.tree2E.leaves.size)

        val viewSettings = object {
            @ActionParameter("Fit to screen")
            fun fitToScreen() {
                camera.view = Matrix44.fit(visualization.bbox, drawer.bounds)
            }

            @ActionParameter("Toggle Blobs")
            fun toggleBlobs() {
                blobsEnabled = !blobsEnabled;
            }

            @ActionParameter("Compute monotone")
            fun computeMonotone() {
                monotoneInterleaving(visualization.tree1, visualization.tree2)
            }
        }

        val exportSettings = object {
            @TextParameter("File name")
            var svgFileName: String = "output"

            @ActionParameter("Export to SVG")
            fun exportToSVG() {
                visualization.composition.saveToFile(File("${svgFileName}.svg"))
                visualization.composition.documentStyle.viewBox
            }
        }

        keyboard.keyDown.listen {
            if (it.key == KEY_SPACEBAR) {
                viewSettings.fitToScreen()
            }
        }

        val dcs = DivergingColorSettings()

        val gui = GUI()
        gui.add(visualization.tes, "Tree embedding")
        gui.add(visualization.ds, "Drawing")
        gui.add(visualization.globalcs, "Global Color Settings")
        gui.add(visualization.tcs, "Three Color Settings")
        gui.add(visualization.gcs, "Gradient Color Settings")
        gui.add(dcs, "Diverging Color Settings")

        gui.add(viewSettings, "View")
        gui.add(exportSettings, "Export")

//        val f = File("colors.txt")
//        val lines = f.readLines()
//        visualization.tcs.t1c1 = ColorRGBa.fromHex(lines[0])
//        visualization.tcs.t1c2 = ColorRGBa.fromHex(lines[1])
//        visualization.tcs.t1c3 = ColorRGBa.fromHex(lines[2])
//        visualization.tcs.t2c1 = ColorRGBa.fromHex(lines[3])
//        visualization.tcs.t2c2 = ColorRGBa.fromHex(lines[4])
//        visualization.tcs.t2c3 = ColorRGBa.fromHex(lines[5])

        gui.loadParameters(File("gui-parameters/paper.json"))

        gui.onChange { name, value ->
            when (name) {
                "hue1", "hue2", "hue3", "sat1", "sat2", "sat3", "lig1", "lig2", "lig3" -> {
                    visualization.tcs = ThreeColorSettings(dcs)
                    visualization.compute()
                }

                else -> {
                    visualization.compute()
                }
            }

            // name is the name of the variable that changed
//            when (name) {
//                "drawNodes", "nodeWidth", "carveInwards", "connectorRadius", "connectorTop", "nonMappedRadius", "markRadius",
//                "verticalEdgeWidth", "verticalMappedRatio", "horizontalEdgeWidth", "nonMappedVerticalEdges", "collapseNonMapped", "thinNonMapped", "pathAreaPatchScale", "patchStrokeScale", "areaPatchStrokeScale",
//                "edgeColor", "edgeColor2", "blacken", "enableGradient", "colorInterpolation", "t1c1", "t1c2", "t1c3", "t2c1", "t2c2", "t2c3",
//                "gridlineThickness", "gridlinePadding", "gridColor", "gridAlpha"
//                    -> {
//                    visualization.compute()
//                }
//            }
        }

        var mouseTree1Position: TreePosition<EmbeddedMergeTree>? = null
        var mouseTree2Position: TreePosition<EmbeddedMergeTree>? = null

        mouse.moved.listen { mouseEvent ->

            val pos = camera.view.inversed * mouseEvent.position
            val posT1 = visualization.toTree1Local(pos)
            mouseTree1Position = visualization.closestPositionT1(posT1, 3.0)
            val posT2 = visualization.toTree2Local(pos)
            mouseTree2Position = visualization.closestPositionT2(posT2, 3.0)
        }

        fun drawMatching(one: TreePosition<EmbeddedMergeTree>, t1ToT2: Boolean) {

            drawer.apply {
                if (treePositionToPoint(one) == null) return
                treePositionToPoint(one)?.let { onePoint ->

                    //if (visualization.interleaving.f == null)
                    val other = if (t1ToT2) visualization.interleaving.f[one] else visualization.interleaving.g[one]
                    if (other == null) return
                    treePositionToPoint(other)?.let { otherPoint ->
                        val onePos =
                            if (t1ToT2) visualization.fromTree1Local(onePoint) else visualization.fromTree2Local(
                                onePoint
                            )
                        val otherPos =
                            if (t1ToT2) visualization.fromTree2Local(otherPoint) else visualization.fromTree1Local(
                                otherPoint
                            )

                        strokeWeight = visualization.ds.markRadius / 3
                        stroke = ColorRGBa.BLUE
                        fill = null
                        lineSegment(onePos, otherPos)

                        strokeWeight = visualization.ds.markRadius / 3
                        stroke = null
                        fill = ColorRGBa.BLUE
                        circle(onePos, 1.0)
                        circle(otherPos, 1.0)
                    }
                }
            }
        }

        fun drawInverseMatching(tree: EmbeddedMergeTree, t1ToT2: Boolean){
            drawer.apply {
                val treeMapping = if(t1ToT2) visualization.interleaving.g else visualization.interleaving.f

                for (node in tree.nodes()) {
                    val pos1 = if(t1ToT2) visualization.fromTree1Local(node.pos) else visualization.fromTree2Local(node.pos)
                    if (treeMapping.inverseNodeEpsilonMap.contains(node)) {
                        //println("yeet")
                        for (treePos in treeMapping.inverseNodeEpsilonMap[node]!!) {
                            val point = treePositionToPoint(treePos)
                            if (point != null) {
                                val pos2 =  if(t1ToT2) visualization.fromTree2Local(treePositionToPoint(treePos)!!) else visualization.fromTree1Local(treePositionToPoint(treePos)!!)
                                strokeWeight = visualization.ds.markRadius / 3
                                stroke = ColorRGBa.BLUE
                                fill = null
                                lineSegment(pos1, pos2)
                            }
                        }
                        //return;
                    }
                    if (treeMapping.pathCharges.contains(node)) {
                        if (treeMapping.pathCharges[node]!! > 2) {
                            //println(treeMapping.inverseNodeEpsilonMap[node])
                            val pos = if(t1ToT2) visualization.fromTree1Local(node.pos) else visualization.fromTree2Local(node.pos)
                            strokeWeight = visualization.ds.markRadius / 3
                            stroke = null
                            fill = ColorRGBa.BLUE
                            circle(pos, 2.0)
                        }

                    }
                }

//                for (path in treeMapping.pathDecomposition) {
//                    for (node in treeMapping.pathDecomposition[2]) {
//                            val pos =
//                                if (t1ToT2) visualization.fromTree1Local(node.pos) else visualization.fromTree2Local(
//                                    node.pos
//                                )
//                            strokeWeight = visualization.ds.markRadius / 3
//                            stroke = null
//                            fill = ColorRGBa.BLUE
//                            circle(pos, 2.0)
//                    }
//                }
            }
        }

        fun deepestNodeInBlob(blob: Triple<MutableList<TreePosition<EmbeddedMergeTree>>, Int, ColorRGBa>): TreePosition<EmbeddedMergeTree>? {
            var deepest:TreePosition<EmbeddedMergeTree>? = null

            for (node in blob.first){
                if (deepest == null){
                    deepest = node
                    continue
                }
                if (node.height > deepest.height){
                    deepest = node
                }
            }
            return deepest
        }

        fun highestNodeInBlob(blob: Triple<MutableList<TreePosition<EmbeddedMergeTree>>, Int, ColorRGBa>): TreePosition<EmbeddedMergeTree>? {
            var highest:TreePosition<EmbeddedMergeTree>? = null

            for (node in blob.first){
                if (highest == null){
                    highest = node
                    continue
                }
                if (node.height < highest.height){
                    highest = node
                }
            }
            return highest
        }

        fun drawBlob(tree: EmbeddedMergeTree, blob: Triple<MutableList<TreePosition<EmbeddedMergeTree>>, Int, ColorRGBa>, gradientInterval: Double, numberOfBlobs: Int) {
            val tree1 = (tree == visualization.tree1E)
            val deepestNodeInBlob = deepestNodeInBlob(blob);
            val highestNodeInBlob = highestNodeInBlob(blob)
            val deepestPos = deepestNodeInBlob
            //val highestBlobPos1 = if(highestNodeInBlob!!.parent != null) highestNodeInBlob.parent!!.pos else highestNodeInBlob.pos
            val blobs = if(tree1) visualization.tree1BlobsTest else visualization.tree2BlobsTest

            val highestBlobPos = visualization.highestPointInBlob(tree1, blobs, visualization.getBlobOfNode(blobs, highestNodeInBlob!!))


            //Lowest Hedge pos might not always be a leave
            //val pathPos = if (tree1) visualization.interleaving.f[highestNodeInBlob!!] else visualization.interleaving.g[highestNodeInBlob!!]
            //val pathNode = pathPos.firstDown

            //val pathID = if (tree1) visualization.getPathID(pathNode, visualization.tree2PathDecomposition) else visualization.getPathID(pathNode, visualization.tree1PathDecomposition)
            //val lowestPathNode = if (tree1) visualization.tree2PathDecomposition[pathID].first() else visualization.tree1PathDecomposition[pathID].first()
            //val lowestHedgePos = lowestPathNode.pos.y + visualization.interleaving.delta

            //val deepestPos = if (deepestNodeInBlob.leaves.isEmpty()) {


            drawer.apply {
                //strokeWeight = visualization.ds.markRadius / 3
                stroke = null

                if (visualization.globalcs.enableGradient)
                    visualization.colorGradiantValue(tree1, gradientInterval)
                else
                    fill = blob.third

                val leftLeaf = tree.leaves.first()
                val rightLeaf = tree.leaves.last()

                val startY = deepestPos!!.height
                //val midX = (leftLeaf.pos.x + rightLeaf.pos.x) / 2
                val width = abs(rightLeaf.pos.x - leftLeaf.pos.x) + (visualization.ds.blobRadius * 2)
                val height = abs(deepestPos.height - highestBlobPos.y)

                //strokeWeight = width + (visualization.ds.blobRadius * 2)
                //val pos = highestNodeInBlob.edgeContour!!.position(1.0)
                val isLeaf = highestNodeInBlob.firstDown.children.isEmpty()

                 //if (isLeaf) deepestPos.y else pos.y
                val leftX = leftLeaf.pos.x - visualization.ds.blobRadius

                var drawRectangles: MutableList<Shape> = mutableListOf()
                for (treePos in blob.first) {
                    val margin = if(treePos.firstDown.fullWidth) visualization.ds.blobRadius else visualization.ds.nonMappedRadius * visualization.ds.blobRadius


                    var leftTopY = highestBlobPos.y
                    var leftTopX = min(deepestNodeInBlob.firstDown.pos.x, treePos.firstDown.pos.x) - margin// visualization.ds.blobRadius

                    var rectWidth = abs(deepestNodeInBlob.firstDown.pos.x - treePos.firstDown.pos.x) + (margin * 2)// (visualization.ds.blobRadius * 2)
                    var rectHeight = treePos.height - highestBlobPos.y
                    //println("rectWidth: " + rectWidth)
                    //println("rectHeight: " + rectHeight)

                    if (rectHeight > 0){
                        drawRectangles.add(Rectangle(leftTopX, leftTopY, rectWidth, rectHeight).shape)
                    }
                }
                var drawRectangle = drawRectangles.first()

                for (rect in drawRectangles){
                    drawRectangle = drawRectangle.union(rect)
                }
                //var drawRectangle = union(drawRectangles, drawRectangles.first())
                //var drawRectangle = Rectangle(leftX, highestBlobPos.y,  width, height).shape

                //Draw hedge from root to root+delta
                if (highestNodeInBlob.firstUp == null){
                    val delta = visualization.interleaving.delta
                    val leftLeave = if (tree1) visualization.tree1E.leaves.first() else visualization.tree2E.leaves.first()
                    val leftMargin = if(leftLeave.fullWidth) visualization.ds.blobRadius else visualization.ds.nonMappedRadius * visualization.ds.blobRadius
                    val rightLeave = if (tree1) visualization.tree1E.leaves.last() else visualization.tree2E.leaves.last()
                    val rightMargin = if(rightLeave.fullWidth) visualization.ds.blobRadius else visualization.ds.nonMappedRadius * visualization.ds.blobRadius
                    val rootWidth = abs(leftLeave.pos.x - rightLeave.pos.x) + (leftMargin + rightMargin)// (visualization.ds.blobRadius * 2)
                    strokeWeight = rootWidth + (visualization.ds.blobRadius * 2)
                    val  rootMidX = (leftLeave.pos.x + rightLeave.pos.x) / 2

                    val topRect = Rectangle(leftLeave.pos.x - leftMargin, highestNodeInBlob.height - visualization.ds.blobRadius, rootWidth, visualization.ds.blobRadius).shape

                    drawRectangle = union(drawRectangle, topRect)
                }

                val lowestTreePositions: MutableList<TreePosition<EmbeddedMergeTree>> = mutableListOf()

                for (leave in tree.leaves){
                    if (false) {
                        if (!blob.first.contains(TreePosition(leave, 0.0)))
                            continue
                    }

                    val currentMaskHighY = tree.getDeepestLeaf().pos.y + 1
                    val carveHeight = abs(leave.pos.y - currentMaskHighY)
                    val carveWidth = visualization.ds.nonMappedRadius * visualization.ds.blobRadius * 2// if (leave.fullWidth || !visualization.ds.collapseNonMapped) visualization.ds.blobRadius else visualization.tes.nodeWidth * visualization.ds.nonMappedRadius

                    val carveRect = Rectangle(leave.pos.x - carveWidth * 0.5, leave.pos.y- 0.01, carveWidth, carveHeight).shape

                    drawRectangle = drawRectangle.difference(carveRect)

                    val lowestTreePosInColumn = blob.first.filter { it.firstDown.pos.x == leave.pos.x }
                        .maxByOrNull { it.height }

                    if (lowestTreePosInColumn != null)
                        lowestTreePositions.add(lowestTreePosInColumn)
                }

                if (visualization.ds.carveInwards) {
                    for (i in lowestTreePositions.indices) {
                        if (i == lowestTreePositions.size - 1) break

                        val currentTreePos = lowestTreePositions[i]
                        val nextTreePos = lowestTreePositions[i + 1]

                        if (currentTreePos.height == nextTreePos.height) continue

                        val leftMargin = if(currentTreePos.firstDown.fullWidth) visualization.ds.blobRadius else visualization.ds.nonMappedRadius * visualization.ds.blobRadius
                        val rightMargin = if(nextTreePos.firstDown.fullWidth) visualization.ds.blobRadius else visualization.ds.nonMappedRadius * visualization.ds.blobRadius

                        val carveXTop = currentTreePos.firstDown.pos.x + leftMargin// visualization.ds.blobRadius
                        val carveYTop = min(currentTreePos.height, nextTreePos.height)
                        val carveWidth =
                            abs(currentTreePos.firstDown.pos.x - nextTreePos.firstDown.pos.x) - (leftMargin + rightMargin)// visualization.ds.blobRadius * 2
                        val carveHeight = abs(currentTreePos.height - nextTreePos.height)

                        if (carveWidth > 0 && carveHeight > 0) {
                            val carveRect = Rectangle(carveXTop, carveYTop, carveWidth, carveHeight).shape
                            drawRectangle = drawRectangle.difference(carveRect)
                        }
                    }
                }

                //Connectors
                val shortestContour = drawRectangle.contours.minBy {it.bounds.height }

                val connectors: MutableList<Shape> = mutableListOf()

                for (contour in drawRectangle.contours) {
                    if (contour == shortestContour) continue

                    val shortTestIsLeft = shortestContour.bounds.center.x < contour.bounds.center.x

                    var conTopX = 0.0
                    var conWidth = 0.0

                    var shortestSideSegment: Segment? = null
                    var contourSideSegment: Segment? = null

                    if (shortTestIsLeft) {
                        conTopX = shortestContour.bounds.x + shortestContour.bounds.width
                        conWidth = abs(contour.bounds.x - conTopX)

                        shortestSideSegment = shortestContour.segments.maxBy{ it.bounds.center.x }
                        contourSideSegment = contour.segments.minBy { it.bounds.center.x }

                    }
                    else {
                        conTopX = contour.bounds.x + contour.bounds.width
                        conWidth = abs(conTopX - shortestContour.bounds.x)

                        shortestSideSegment = shortestContour.segments.minBy{ it.bounds.center.x }
                        contourSideSegment = contour.segments.maxBy { it.bounds.center.x }

                    }

                    val conTopY = if (visualization.ds.connectorTop)
                        min(shortestSideSegment.bounds.y, contourSideSegment.bounds.y) else min(shortestSideSegment.bounds.center.y, contourSideSegment.bounds.center.y) - visualization.ds.connectorRadius * 0.5

                    val conHeight = visualization.ds.connectorRadius

                    if (conHeight > 0) {
                        val connector = Rectangle(conTopX, conTopY, conWidth, conHeight).shape
                        connectors.add(connector)
                    }
                }

                for (connector in connectors) {
                    drawRectangle = drawRectangle.union(connector)
                }



                val leavesLeftOfDeepest = mutableListOf<EmbeddedMergeTree>();
                val leavesRightOfDeepest = mutableListOf<EmbeddedMergeTree>();

                var highestCheck = if (highestNodeInBlob.firstUp == null) highestNodeInBlob else highestNodeInBlob.firstUp!!

//                while (highestCheck.parent != null) {
//                    highestCheck = highestCheck.parent!!
//                }

                for (leaf in tree.leaves) {
                    if (leaf.pos.x <= deepestNodeInBlob.firstDown.pos.x) {
                        leavesLeftOfDeepest.add(leaf)
                    }
                    else
                        leavesRightOfDeepest.add(leaf)
                }

                var currentMaskLeaf: EmbeddedMergeTree? = null
                var currentMaskHighY = tree.getDeepestLeaf().pos.y + 1

                for (leaf in leavesLeftOfDeepest.reversed()){
                    if (!blob.first.contains(TreePosition(leaf, 0.0))){// && leaf.pos.y > highestBlobPos.y) { //Leaf is from another blob
                        //if (leaf.pos.y <= highestBlobPos.y) continue

                        //get the highest parent blob that is not part of this blob
                        var highest = leaf

                        var parentBlob = visualization.getAccurateParentBlob(tree1, blobs, visualization.getBlobOfNode(blobs, TreePosition(highest, 0.0)))

//                        while (parentBlob != -1 && blobs[parentBlob] != blob){ //!visualization.treePositionIsInBlob(tree1, blob, parentBlob))
////                            if (highest.parent!!.nodes().contains(highestNodeInBlob.firstDown)) {
////                                break
////                            }
//                            highest = highest.parent!! // if (tree1) visualization.tree1BlobsTest[parentBlob] else visualization.tree2BlobsTest[parentBlob]
//                            parentBlob = visualization.getAccurateParentBlob(tree1, blobs, visualization.getBlobOfNode(blobs, TreePosition(highest, 0.0)))
//
//                        }

                        while (highest.parent != null && !blob.first.contains(TreePosition(highest.parent!!, 0.0))) {

                            if (highest.parent!!.nodes().contains(highestNodeInBlob.firstDown)) {
                                break
                            }
                            highest = highest.parent!!
                        }

                        val highestOfCurrent = visualization.highestPointInBlob(tree1, blobs, visualization.getBlobOfNode(blobs, TreePosition(highest, 0.0))).y

                        if (currentMaskLeaf == null) {
                            currentMaskLeaf = highest
                            currentMaskHighY = highestOfCurrent
                        }
                        else {
                            if (highestOfCurrent < currentMaskHighY) {
                                currentMaskLeaf = highest
                                currentMaskHighY = highestOfCurrent
                            }
                        }
                    }

                    val xPos = leaf.pos.x - visualization.ds.blobRadius

                    //val isFromSameBlob = blob.first.contains(leaf)
                    //val highY = if(isFromSameBlob) leaf.pos.y else visualization.highestPointInBlob(tree1, blobs, visualization.getBlobOfNode(blobs, leaf)).y// currentMaskHighY// leaf.pos.y //if (isFromSameBlob) deepestNodeInBlob.pos.y else leaf.pos.y
                    val highY = currentMaskHighY// lowestHedgePos//currentMaskHighY//min(leaf.pos.y, currentMaskHighY)// leaf.pos.y //if (isFromSameBlob) deepestNodeInBlob.pos.y else leaf.pos.y
                    val lowY = tree.getDeepestLeaf().pos.y + visualization.interleaving.delta + 10
                    val maskHeight = abs(highY - lowY)
                    val maskWidth = visualization.ds.blobRadius*2

                    if (maskHeight > 0) {
                        val mask = Rectangle(xPos, highY, maskWidth, maskHeight).shape
                        //drawRectangle = difference(drawRectangle, mask)
                    }

                }
                currentMaskLeaf = null
                currentMaskHighY = tree.getDeepestLeaf().pos.y + 1



                for (leaf in leavesRightOfDeepest) {
                    if (!blob.first.contains(TreePosition(leaf, 0.0))){//  && leaf.pos.y > highestBlobPos.y) { //Leaf is from another blob

                        //TODO: GET MORE SOLID SOLUTION
                        //get the highest parent blob that is nog part of this blob
                        var highest = leaf
//                        while (highest.parent != null && !blob.first.contains(highest.parent)) {
//                            if (highest.parent!!.nodes().contains(highestNodeInBlob)) {
//                                break
//                            }
//
//                            highest = highest.parent!!
//                        }

                        val highestOfCurrent = visualization.highestPointInBlob(tree1, blobs, visualization.getBlobOfNode(blobs, TreePosition(leaf, 0.0))).y

                        if (currentMaskLeaf == null) {
                            currentMaskLeaf = leaf
                            currentMaskHighY = highestOfCurrent
                        }
                        else {
                            if (highestOfCurrent < currentMaskHighY) {
                                currentMaskLeaf = leaf
                                currentMaskHighY = highestOfCurrent
                            }
                        }
                    }

                    val xPos = leaf.pos.x - visualization.ds.blobRadius

                    val isFromSameBlob = blob.first.contains(TreePosition(leaf, 0.0))

                    val highY = currentMaskHighY// lowestHedgePos// currentMaskHighY// min(leaf.pos.y, currentMaskHighY)
                    //val highY = if(isFromSameBlob) leaf.pos.y else visualization.highestPointInBlob(tree1, blobs, visualization.getBlobOfNode(blobs, leaf)).y// currentMaskHighY// leaf.pos.y //if (isFromSameBlob) deepestNodeInBlob.pos.y else leaf.pos.y
                    val lowY = tree.getDeepestLeaf().pos.y  + visualization.interleaving.delta + 10
                    val maskHeight = abs(highY - lowY)
                    val maskWidth = visualization.ds.blobRadius*2

                    if (maskHeight > 0) {
                        val mask = Rectangle(xPos, highY, maskWidth, maskHeight + 1).shape
                        //drawRectangle = difference(drawRectangle, mask)
                    }
                }

                fill = blob.third.mix(ColorRGBa.WHITE, visualization.ds.whiten)
                if (tree1)
                    shape(visualization.fromTree1Local(drawRectangle))
                else shape(visualization.fromTree2Local(drawRectangle))
            }
        }

        fun alternatingSpacedValues(x: Int): List<Double> {
            // Calculate x evenly spaced values between 0 and 1
            val evenlySpaced = List(x) { it.toDouble() / (x - 1) }

            val result = mutableListOf<Double>()

            for (i in 0 until x) {
                if (i % 2 == 0) {
                    // Pick from the start for even indices
                    result.add(evenlySpaced[i / 2])
                } else {
                    // Pick from the end for odd indices
                    result.add(evenlySpaced[x - 1 - i / 2])
                }
            }

            return result
        }

        fun drawBlobs() {
            if (!blobsEnabled) return;

            //Everything with blobs is drawn in reversed order so that higher up blobs will be drawn on top of lower blobs
            var values = alternatingSpacedValues(visualization.tree1BlobsTest.size)

            var count: Int = 0;
            for (blob in visualization.tree1BlobsTest.reversed()) {
                drawBlob(visualization.tree1E, blob, values[count], visualization.tree1BlobsTest.size)
                count+=1
            }

            values = alternatingSpacedValues(visualization.tree2BlobsTest.size).reversed()
            count = 0
            //Draw blobs of tree2 (reversed to draw large blobs on top of smaller blobs)
            for (blob in visualization.tree2BlobsTest.reversed()) {
                drawBlob(visualization.tree2E, blob, values[count], visualization.tree2BlobsTest.size)
                count+=1
            }
        }

        fun drawBlobPath(tree: EmbeddedMergeTree, blob: Triple<MutableList<TreePosition<EmbeddedMergeTree>>, Int, ColorRGBa>, gradientInterval: Double, numberOfBlobs: Int) {
            val tree1 = (tree == visualization.tree1E)

            drawer.apply {
                fill = null
                strokeWeight = visualization.ds.verticalEdgeWidth

                stroke = if (visualization.globalcs.enableGradient)
                    visualization.colorGradiantValue(tree1, gradientInterval)
                else
                    blob.third

                //fill = blob.second

                val currentNode =
                    blob.first.maxByOrNull { it.height } //This is the deepest node in the blob (path is defined by that node.
                val pathNodes = if (tree1) visualization.tree2PathDecomposition[blob.second] else visualization.tree1PathDecomposition[blob.second]
                //if (lowestPathNode == null) return //return if we don't hit the other tree.
                if (pathNodes.isEmpty()) return
                val lowestPathPoint = if (visualization.interleaving.delta < 0.001) TreePosition(pathNodes.first(), 0.0) else TreePosition(pathNodes.first(), pathNodes.first().height -(currentNode!!.height - visualization.interleaving.delta))

                //if (treePositionToPoint(pathNodes.first() == null) return

                //val lowestPathPoint =
                //    if (tree1) visualization.interleaving.f.nodeMap[currentNode!!.firstDown] else visualization.interleaving.g.nodeMap[currentNode!!.firstDown]


                //Draw the lowest sub edge delta up from the leaf of the path
                val edge = lowestPathPoint.firstDown.edgeContour;
                if (edge == null) return
                val curveOffset = if (visualization.interleaving.delta < 0.001) 0.0 else edge!!.on(treePositionToPoint(lowestPathPoint)!!, .5);
                val subContour = edge.sub(0.0, curveOffset!!)
                val blackBottomMargin = visualization.ds.verticalEdgeWidth * (1- visualization.ds.verticalMappedRatio) / edge.length /2

                val backgroundSubContour = edge.sub(0.0, curveOffset!! + blackBottomMargin)// - )

                val drawContour = subContour

                var highestY = subContour.bounds.y

                val backgroundContours: MutableList<ShapeContour> = mutableListOf()
                val pathContours: MutableList<ShapeContour> = mutableListOf()

                backgroundContours.add(backgroundSubContour)
                pathContours.add(subContour)

                //draw rest of the path till the root node.
                var pathParent: EmbeddedMergeTree? = lowestPathPoint.firstUp;
                while (pathParent != null && pathNodes.contains(pathParent)) {
                    if (pathParent.edgeContour != null) {// && pathParent.pos.x == lowestPathPoint.firstDown.pos.x) {
                        highestY = pathParent.edgeContour!!.bounds.y
                        backgroundContours.add(pathParent.edgeContour!!)
                        pathContours.add(pathParent.edgeContour!!)
                    }

                    //Mapped paths
                    if (pathParent.edgeContour != null) {
                        if (tree1) {
                            stroke = blob.third
                            strokeWeight = visualization.ds.verticalEdgeWidth * visualization.ds.verticalMappedRatio
                            contour(visualization.fromTree2Local(pathParent.edgeContour!!))
                            drawContour.union(pathParent.edgeContour!!.shape)
                        }
                        else {
                            stroke = blob.third
                            strokeWeight = visualization.ds.verticalEdgeWidth * visualization.ds.verticalMappedRatio
                            contour(visualization.fromTree1Local(pathParent.edgeContour!!))
                        }
                    }
                    pathParent = pathParent.parent;
                }

                for (cont in backgroundContours) {
                    stroke = visualization.globalcs.edgeColor
                    strokeWeight = visualization.ds.verticalEdgeWidth

                    if (tree1) contour(visualization.fromTree2Local(cont))
                    else contour(visualization.fromTree1Local(cont))
                }

                //Draw Area Patch
                fill = blob.third
                strokeWeight = visualization.ds.verticalEdgeWidth * visualization.ds.patchStrokeScale
                stroke = if (tree1) visualization.globalcs.edgeColor else visualization.globalcs.edgeColor2

                val posY = if (pathParent != null) highestY else highestY - visualization.interleaving.delta - visualization.ds.blobRadius
                val posX = lowestPathPoint.firstDown.pos.x
                var pos = Vector2(posX, posY)
                pos = if (!tree1) visualization.fromTree1Local(pos) else visualization.fromTree2Local(pos)

                val rectWidth = visualization.ds.verticalEdgeWidth * visualization.ds.pathAreaPatchScale
                pos -= rectWidth / 2
                rectangle(pos, rectWidth)

                //Draw colored path
                for (cont in pathContours) {
                    stroke = blob.third
                    strokeWeight = visualization.ds.verticalEdgeWidth * visualization.ds.verticalMappedRatio

                    if (tree1) contour(visualization.fromTree2Local(cont))
                    else contour(visualization.fromTree1Local(cont))
                }
            }
        }

        fun drawPathSquares(t1: Boolean, path: MutableList<EmbeddedMergeTree>, gradientInterval: Double, color: ColorRGBa) {
            drawer.apply {

                fill = if (visualization.globalcs.enableGradient)
                    visualization.colorGradiantValue(!t1, gradientInterval)
                else
                    color

                strokeWeight = visualization.ds.verticalEdgeWidth * visualization.ds.patchStrokeScale
                stroke = if (t1) visualization.globalcs.edgeColor else visualization.globalcs.edgeColor2

                val parent = path.last().parent
                val posY = parent?.pos?.y ?: (path.last().pos.y - visualization.interleaving.delta - visualization.ds.blobRadius)
                var pos = Vector2(path.last().pos.x, posY)

                pos = if (t1) visualization.fromTree1Local(pos) else visualization.fromTree2Local(pos)

                val rectWidth = visualization.ds.verticalEdgeWidth * visualization.ds.pathAreaPatchScale
                pos -= rectWidth / 2
                rectangle(pos, rectWidth)

            }
        }

        fun drawBlobPaths() {
            if (!blobsEnabled) return;

            val t1values = alternatingSpacedValues(visualization.tree1BlobsTest.size)
            val t2values = alternatingSpacedValues(visualization.tree2BlobsTest.size)

            var count: Int = 0;

            //Draw Rays from root
            drawer.apply {
                fill = null

                //Draw Contour
                val pos1  = visualization.tree1E.pos
                val contour1 = LineSegment(pos1, Vector2(pos1.x, pos1.y - visualization.interleaving.delta - visualization.ds.blobRadius)).contour

                // Draw white casing
                stroke = visualization.globalcs.edgeColor
                strokeWeight = visualization.ds.verticalEdgeWidth
                contour(visualization.fromTree1Local(contour1))

                //Draw Contour
                val pos2  = visualization.tree2E.pos
                val contour2 = LineSegment(pos2, Vector2(pos2.x, pos2.y - visualization.interleaving.delta - visualization.ds.blobRadius)).contour

                // Draw white casing
                stroke = visualization.globalcs.edgeColor
                strokeWeight = visualization.ds.verticalEdgeWidth
                contour(visualization.fromTree2Local(contour2))
            }

            //Draw mapping of blob in the first tree onto the second tree
            for (blob in visualization.tree1BlobsTest) {
                drawBlobPath(visualization.tree1E, blob, t1values[blob.second], visualization.tree1BlobsTest.size)
                //drawPathSquares(false, visualization.tree2PathDecomposition[blob.second], t1values[blob.second], blob.third)
                count += 1
            }
//
//            count = 0
//            //Draw mapping of blob in the second tree onto the second tree
            for (blob in visualization.tree2BlobsTest) {
                drawBlobPath(visualization.tree2E, blob, t2values[blob.second], visualization.tree2BlobsTest.size)
                //drawPathSquares(true, visualization.tree1PathDecomposition[blob.second], t2values[blob.second], blob.third)// visualization.colorThreeValues(false, visualization.tree2BlobsTest.size)[blob.second])

                count+=1
            }

            //Draw Rays from root
            drawer.apply {
                stroke = ColorRGBa.BLACK
                fill = null
                strokeWeight = visualization.ds.verticalEdgeWidth*visualization.ds.verticalMappedRatio

                //Draw Contour
                val pos1  = visualization.tree1E.pos
                val contour1 = LineSegment(pos1, Vector2(pos1.x, pos1.y - visualization.interleaving.delta - visualization.ds.blobRadius)).contour

                //Set path Color
                val pathID1 = visualization.tree1BlobsTest.first().second
                stroke = if (visualization.globalcs.enableGradient) visualization.colorGradiantValue(false, t2values[pathID1]) // t2values[visualization.tree2Blobs.size-1])
                else visualization.tree2BlobsTest[0].third// visualization.colorThreeValues(false, visualization.tree2BlobsTest.size)[pathID1]
                contour(visualization.fromTree1Local(contour1))

                //Draw Contour
                val pos2  = visualization.tree2E.pos
                val contour2 = LineSegment(pos2, Vector2(pos2.x, pos2.y - visualization.interleaving.delta - visualization.ds.blobRadius)).contour

                //Set path Color
                val pathID2 = visualization.tree2BlobsTest.first().second
                stroke = if (visualization.globalcs.enableGradient) visualization.colorGradiantValue(true, t1values[pathID2])// t1values[visualization.tree1Blobs.size-1])
                else visualization.tree1BlobsTest[0].third//visualization.colorThreeValues(true, visualization.tree1BlobsTest.size)[pathID2]

                contour(visualization.fromTree2Local(contour2))

                //Draw nodes of the trees on top of the path decomposition
                if(visualization.ds.drawNodes)
                    composition(visualization.nodeComposition)
            }
        }

        viewSettings.fitToScreen()

        // Press F11 to toggle the GUI
        extend(gui) {
            persistState = false
        }
        extend(camera) {
            enableRotation = false
        }
        extend {
            drawer.apply {
                clear(visualization.ds.bgColor)
                visualization.globalcs.edgeColor2 = visualization.globalcs.edgeColor
                //drawBlobs();

//                var fillColor = ColorRGBa(0.0, 0.0, 0.0, visualization.ds.blacken)
//                fill = fillColor
//
//                rectangle(bounds)

                // Draw ray upward from roots
//                stroke = visualization.globalcs.edgeColor
//                val rootT1 = visualization.fromTree1Local(visualization.tree1E.pos)
//                strokeWeight = visualization.ds.verticalEdgeWidth
//                lineSegment(rootT1, Vector2(rootT1.x, (camera.view.inversed * Vector2(0.0, 0.01)).y))
//                val rootT2 = visualization.fromTree2Local(visualization.tree2E.pos)
//                lineSegment(rootT2, Vector2(rootT2.x, (camera.view.inversed * Vector2(0.0, 0.01)).y))

                //Draw tree
                composition(visualization.composition)

                //drawBlobPaths();

                //drawInverseMatching(visualization.tree2E, false)
                //drawInverseMatching(visualization.tree1E, true)

                mouseTree1Position?.let {
                    drawMatching(it, true)
                }
                mouseTree2Position?.let {
                    drawMatching(it, false)
                }


                isolated {
                    view *= camera.view.inversed

                    fill = ColorRGBa.BLACK
                    stroke = ColorRGBa.BLACK
                    val h = visualization.toTree1Local(camera.view.inversed * mouse.position).y
                    val hFormatted = String.format(Locale.US, "%.2f", h)
                    text("Height: $hFormatted", drawer.width - 100.0, drawer.height - 10.0)
                }
            }
        }
    }
}